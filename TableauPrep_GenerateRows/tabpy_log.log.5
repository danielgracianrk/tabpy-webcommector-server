2020-05-11,13:22:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:22:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.35ms
2020-05-11,13:22:08 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:22:08 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:22:08 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:22:08 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:22:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:22:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:22:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:22:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:08 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:22:08 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:22:08 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.73ms
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:22:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:22:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.86ms
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:22:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:22:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:22:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.75ms
2020-05-11,13:22:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.99ms
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:22:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:22:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:22:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 53.46ms
2020-05-11,13:22:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 52.74ms
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:22:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:22:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:22:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,13:22:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,13:22:09 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,13:22:09 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,13:22:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 546.83ms
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:23:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:23:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 21.48ms
2020-05-11,13:23:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 20.62ms
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:23:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:23:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 19.81ms
2020-05-11,13:23:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 20.06ms
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,13:23:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,13:23:53 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,13:23:54 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,13:23:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 733.98ms
2020-05-11,13:23:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:23:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:23:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 6.76ms
2020-05-11,13:23:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:23:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:23:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 6.62ms
2020-05-11,13:23:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:23:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:23:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 6.56ms
2020-05-11,13:23:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,13:23:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,13:23:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,13:23:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,13:23:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,13:23:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,13:23:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,13:23:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,13:23:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\n\n\ndef set_globvar(input):\n    global keys  # Needed to modify global copy of globvar\n    keys = input\n\ndef get_globvar():\n\n    global keys\n    return keys\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,13:23:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 
 
 def set_globvar(input):
     global keys  # Needed to modify global copy of globvar
     keys = input
 
 def get_globvar():
 
     global keys
     return keys
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,13:23:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.92ms
2020-05-11,14:10:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:10:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:10:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:10:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:10:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:10:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:10:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:10:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:10:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:10:27 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_json' is not defined"
2020-05-11,14:10:27 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 10.30ms
2020-05-11,14:10:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:10:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:10:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:10:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:10:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:10:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:10:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:10:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:10:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:10:28 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_json' is not defined"
2020-05-11,14:10:28 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 11.71ms
2020-05-11,14:10:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:10:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:10:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:10:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:10:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:10:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:10:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:10:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:10:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:10:31 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_json' is not defined"
2020-05-11,14:10:31 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 7.91ms
2020-05-11,14:10:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:10:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:10:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:10:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:10:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:10:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:10:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:10:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:10:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:10:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:10:31 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_json' is not defined"
2020-05-11,14:10:31 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.00ms
2020-05-11,14:11:00 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,14:11:00 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:11:00 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,14:11:02 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,14:11:02 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,14:11:02 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,14:11:02 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,14:11:02 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,14:11:02 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,14:11:02 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,14:11:02 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,14:11:02 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,14:11:02 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,14:11:02 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,14:11:02 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:11:02 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:11:02 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:11:02 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,14:11:02 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,14:11:02 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,14:11:02 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:11:02 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:11:02 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:11:02 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,14:11:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:11:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:11:07 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 424.31ms
2020-05-11,14:11:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:11:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:11:07 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.20ms
2020-05-11,14:11:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:11:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:11:07 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,14:11:08 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,14:11:08 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="AttributeError : 'builtin_function_or_method' object has no attribute 'keys'"
2020-05-11,14:11:08 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 954.16ms
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:11:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:11:10 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.95ms
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:11:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:11:10 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.13ms
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:11:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:11:10 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,14:11:11 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,14:11:11 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="AttributeError : 'builtin_function_or_method' object has no attribute 'keys'"
2020-05-11,14:11:11 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 621.27ms
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:11:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:11:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.55ms
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:11:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:11:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.13ms
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:11:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:11:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:11:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:11:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys" in globals():\n        set_globvar("Init")\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    keys = get_globvar()\n\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:11:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys" in globals():
         set_globvar("Init")
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     keys = get_globvar()
 
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:11:13 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,14:11:14 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,14:11:14 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="AttributeError : 'builtin_function_or_method' object has no attribute 'keys'"
2020-05-11,14:11:14 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 544.48ms
2020-05-11,14:12:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:12:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:12:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:12:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:12:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:12:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:12:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:12:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:12:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:12:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:12:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:12:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:12:39 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'get_first_row' is not defined"
2020-05-11,14:12:39 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 7.19ms
2020-05-11,14:12:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:12:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:12:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:12:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:12:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:12:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:12:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:12:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:12:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:12:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:12:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:12:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:12:39 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'get_first_row' is not defined"
2020-05-11,14:12:39 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 7.31ms
2020-05-11,14:13:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:13:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:13:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:13:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:13:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:13:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:13:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:13:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:13:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:13:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.65ms
2020-05-11,14:13:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:13:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:13:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:13:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:13:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:13:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:13:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:13:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:13:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:13:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.13ms
2020-05-11,14:13:04 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:13:04 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:13:04 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:13:04 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:13:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:13:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:13:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:13:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:04 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:13:04 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:13:04 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.21ms
2020-05-11,14:13:04 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:13:04 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:13:04 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:13:04 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:13:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:13:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:13:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:13:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:13:04 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:13:04 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:13:04 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.24ms
2020-05-11,14:26:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:26:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:26:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:26:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:26:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:26:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.76ms
2020-05-11,14:26:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:26:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:26:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:26:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:26:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:26:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.69ms
2020-05-11,14:26:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:26:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:26:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:26:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:26:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:26:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:26:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:26:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:26:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:26:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.77ms
2020-05-11,14:26:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:26:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:26:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:26:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:26:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:26:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:26:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:26:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:26:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:26:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.44ms
2020-05-11,14:26:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:26:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:26:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:26:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:26:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:26:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:26:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:26:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:26:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:26:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.63ms
2020-05-11,14:26:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:26:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:26:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:26:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:26:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:26:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:26:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:26:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:26:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:26:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:26:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.66ms
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.56ms
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.51ms
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 20.40ms
2020-05-11,14:27:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.98ms
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 19.63ms
2020-05-11,14:27:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 19.60ms
2020-05-11,14:27:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.64ms
2020-05-11,14:27:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.67ms
2020-05-11,14:27:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.47ms
2020-05-11,14:27:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.74ms
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.37ms
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.83ms
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 18.89ms
2020-05-11,14:27:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 18.64ms
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.92ms
2020-05-11,14:27:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.86ms
2020-05-11,14:27:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:58 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.39ms
2020-05-11,14:27:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:27:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:27:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:27:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:27:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:27:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:27:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:27:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:27:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:27:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:27:58 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.56ms
2020-05-11,14:28:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:28:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:28:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:28:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:28:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:28:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:28:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:28:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:28:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:28:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:28:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:28:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:28:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 36.98ms
2020-05-11,14:28:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:28:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:28:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:28:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:28:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:28:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:28:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:28:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:28:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:28:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:28:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(url)\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:28:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print(url)
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:28:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 23.52ms
2020-05-11,14:29:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:29:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:29:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:29:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:29:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:29:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:29:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:29:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:29:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:29:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.78ms
2020-05-11,14:29:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:29:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:29:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:29:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:29:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:29:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:29:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:29:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:29:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:29:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.82ms
2020-05-11,14:29:25 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,14:29:25 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:29:25 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,14:29:35 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,14:29:35 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,14:29:35 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,14:29:35 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,14:29:35 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,14:29:35 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,14:29:35 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,14:29:35 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,14:29:35 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,14:29:35 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,14:29:35 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,14:29:35 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:29:35 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:29:35 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:29:35 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,14:29:35 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,14:29:35 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,14:29:35 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:29:35 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:29:35 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:29:35 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,14:29:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:29:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:29:45 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:29:45 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:29:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:29:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:29:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:29:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:45 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:29:45 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:29:46 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="BrokenPipeError : [Errno 32] Broken pipe"
2020-05-11,14:29:46 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 475.92ms
2020-05-11,14:29:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:29:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:29:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:29:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:29:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:29:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:29:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:29:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:29:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:29:46 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="BrokenPipeError : [Errno 32] Broken pipe"
2020-05-11,14:29:46 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 29.25ms
2020-05-11,14:29:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:29:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:29:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:29:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:29:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:29:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:29:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:29:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:29:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:29:50 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="BrokenPipeError : [Errno 32] Broken pipe"
2020-05-11,14:29:50 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 29.96ms
2020-05-11,14:29:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:29:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:29:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:29:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:29:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:29:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:29:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:29:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:29:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:29:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:29:51 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="BrokenPipeError : [Errno 32] Broken pipe"
2020-05-11,14:29:51 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 31.82ms
2020-05-11,14:30:13 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,14:30:13 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:30:13 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,14:30:16 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,14:30:16 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,14:30:16 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,14:30:16 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,14:30:16 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,14:30:16 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,14:30:16 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,14:30:16 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,14:30:16 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,14:30:16 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,14:30:16 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,14:30:16 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:30:16 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:30:16 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:30:16 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,14:30:16 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,14:30:16 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,14:30:16 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:30:16 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:30:16 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:30:16 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,14:30:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:30:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:30:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:30:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:30:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:30:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:30:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:30:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:30:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:30:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:30:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:30:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:30:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 299.27ms
2020-05-11,14:30:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:30:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:30:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:30:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:30:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:30:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:30:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:30:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:30:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:30:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:30:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:30:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:30:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.72ms
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:31:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:31:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:31:23 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:31:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:31:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:31:23 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:31:23 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 42.35ms
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:31:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:31:23 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 50.81ms
2020-05-11,14:31:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:31:23 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:31:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:31:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:31:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:23 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:31:23 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:31:23 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.99ms
2020-05-11,14:31:23 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 40.47ms
2020-05-11,14:31:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:31:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:31:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:31:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:31:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:31:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:31:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:31:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:24 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:31:24 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:31:24 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.68ms
2020-05-11,14:31:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:31:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:31:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:31:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:31:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:31:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:31:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:31:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:24 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:31:24 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:31:24 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.15ms
2020-05-11,14:31:53 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,14:31:54 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:31:54 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,14:31:56 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,14:31:56 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,14:31:56 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,14:31:56 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,14:31:56 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,14:31:56 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,14:31:56 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,14:31:56 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,14:31:56 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,14:31:56 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,14:31:56 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,14:31:56 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:31:56 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:31:56 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:31:56 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,14:31:56 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,14:31:56 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,14:31:56 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:31:56 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:31:56 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:31:56 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,14:31:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:31:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:31:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:31:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:31:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:31:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:31:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:31:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    prin(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:31:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     prin(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:31:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 263.63ms
2020-05-11,14:31:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:31:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:31:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:31:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:31:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:31:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:31:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:31:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:31:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    prin(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:31:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     prin(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:31:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.58ms
2020-05-11,14:33:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.64ms
2020-05-11,14:33:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.77ms
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 47.43ms
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 54.98ms
2020-05-11,14:33:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 62.84ms
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 67.95ms
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 40.21ms
2020-05-11,14:33:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.19ms
2020-05-11,14:33:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:26 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.53ms
2020-05-11,14:33:26 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:26 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:26 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:26 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:26 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:26 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:26 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 23.11ms
2020-05-11,14:33:37 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,14:33:38 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:33:38 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,14:33:39 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,14:33:39 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,14:33:39 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,14:33:39 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,14:33:39 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,14:33:39 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,14:33:39 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,14:33:39 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,14:33:39 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,14:33:39 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,14:33:39 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,14:33:39 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:33:39 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:33:39 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:33:39 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,14:33:39 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,14:33:39 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,14:33:39 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:33:39 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:33:39 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:33:39 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,14:33:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 273.30ms
2020-05-11,14:33:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:33:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:33:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:33:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:33:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print("###### THE URL #######")\n\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    return df\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:33:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     response = requests.get(url)
     iter = response.iter_lines()
     print("###### THE URL #######")
 
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     data = list()
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     return df
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:33:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.19ms
2020-05-11,14:36:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:36:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:36:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:36:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:36:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:36:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:36:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:36:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:36:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:36:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:36:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return "Lala"\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:36:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return "Lala"
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:36:33 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.26ms
2020-05-11,14:36:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:36:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:36:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:36:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:36:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:36:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:36:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:36:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:36:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:36:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:36:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return "Lala"\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:36:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return "Lala"
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:36:33 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.04ms
2020-05-11,14:37:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:37:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:37:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:37:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:37:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:37:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:37:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:37:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:37:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:37:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:37:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:37:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:37:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.35ms
2020-05-11,14:37:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:37:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:37:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:37:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:37:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:37:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:37:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:37:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:37:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:37:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:37:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:37:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:37:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.03ms
2020-05-11,14:38:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:38:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:38:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:38:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:38:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:38:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:38:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:38:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:38:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:38:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 27.42ms
2020-05-11,14:38:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:38:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:38:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:38:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:38:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:38:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:38:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:38:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:38:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:38:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 24.42ms
2020-05-11,14:38:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:38:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:38:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:38:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:38:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:38:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:38:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:38:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:38:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:38:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 27.56ms
2020-05-11,14:38:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:38:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:38:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:38:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:38:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:38:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:38:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:38:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:38:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:38:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.10ms
2020-05-11,14:38:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:38:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:38:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:38:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:38:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:38:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:38:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:38:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:38:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:38:33 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.08ms
2020-05-11,14:38:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:38:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:38:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:38:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:38:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:38:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:38:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:38:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:38:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:38:33 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.50ms
2020-05-11,14:38:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:38:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:38:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:38:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:38:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:38:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:38:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:38:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:38:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:38:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.09ms
2020-05-11,14:38:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:38:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:38:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:38:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:38:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:38:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:38:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:38:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:38:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:38:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:38:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 24.10ms
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:39:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:39:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 34.96ms
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:39:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:39:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:39:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 56.09ms
2020-05-11,14:39:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:39:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 54.46ms
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:39:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 46.43ms
2020-05-11,14:39:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:39:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:39:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:39:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:39:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.49ms
2020-05-11,14:39:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 42.99ms
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_json = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:18 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_json = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:18 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.16ms
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_json = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:18 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_json = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:18 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.34ms
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:18 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_json = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:41:18 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_json = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:41:18 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,14:41:19 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,14:41:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 1570.89ms
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_json = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_json = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:27 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.74ms
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_json = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_json = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:27 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.92ms
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_json = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:41:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_json = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:41:27 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,14:41:28 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,14:41:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 569.42ms
2020-05-11,14:41:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:36 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.42ms
2020-05-11,14:41:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:36 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 23.47ms
2020-05-11,14:41:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.04ms
2020-05-11,14:41:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 37.07ms
2020-05-11,14:41:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:50 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.55ms
2020-05-11,14:41:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:41:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:41:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:41:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:41:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:41:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:41:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:41:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:41:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys = \'\'\nfirst_row = \'\'\n\ndef set_first_row(input):\n    global first_row # Needed to modify global copy of globvar\n    first_row = input\n\ndef get_first_row():\n    global first_row\n    return first_row\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row = input\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:41:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys = ''
 first_row = ''
 
 def set_first_row(input):
     global first_row # Needed to modify global copy of globvar
     first_row = input
 
 def get_first_row():
     global first_row
     return first_row
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row = input
 
 def get_globvar():
     global keys_json
     return keys_json
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_json" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:41:50 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.95ms
2020-05-11,14:44:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:44:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:44:25 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,14:44:25 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.68ms
2020-05-11,14:44:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:44:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:44:25 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,14:44:25 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.69ms
2020-05-11,14:44:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:44:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:44:27 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,14:44:27 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.52ms
2020-05-11,14:44:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:44:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:44:27 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,14:44:27 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.24ms
2020-05-11,14:44:36 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,14:44:37 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:44:37 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,14:44:38 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,14:44:38 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,14:44:38 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,14:44:38 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,14:44:38 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,14:44:38 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,14:44:38 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,14:44:38 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,14:44:38 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,14:44:38 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,14:44:38 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,14:44:38 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:44:38 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:44:38 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:44:38 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,14:44:38 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,14:44:38 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,14:44:38 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:44:38 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:44:38 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:44:38 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:44:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:44:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 254.01ms
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:44:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:44:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.95ms
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:44:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:44:42 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,14:44:42 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,14:44:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 448.23ms
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:44:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:44:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.89ms
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:44:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:44:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.82ms
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:44:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:44:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:44:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:44:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:44:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:44:44 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,14:44:44 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,14:44:45 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 403.83ms
2020-05-11,14:48:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:48:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:48:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:48:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:48:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:48:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:48:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:48:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:48:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:48:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.49ms
2020-05-11,14:48:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:48:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:48:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:48:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:48:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:48:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:48:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:48:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:48:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:48:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.55ms
2020-05-11,14:48:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:48:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:48:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:48:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:48:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:48:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:48:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:48:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:48:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:48:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.73ms
2020-05-11,14:48:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:48:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:48:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:48:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:48:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:48:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:48:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:48:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:48:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:48:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:48:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.88ms
2020-05-11,14:53:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:53:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:53:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:53:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:53:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:53:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:53:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:53:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csn  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:53:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csn  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:53:19 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_csv' is not defined"
2020-05-11,14:53:19 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 22.22ms
2020-05-11,14:53:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:53:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:53:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:53:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:53:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:53:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:53:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:53:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csn  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row)\n    dict = {}\n    for i in keys:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:53:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csn  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row)
     dict = {}
     for i in keys:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:53:19 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_csv' is not defined"
2020-05-11,14:53:19 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 29.33ms
2020-05-11,14:53:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:53:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:53:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:53:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:53:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:53:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:53:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:53:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csn  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csvs:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:53:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csn  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csvs:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:53:41 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_csv' is not defined"
2020-05-11,14:53:41 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 27.61ms
2020-05-11,14:53:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:53:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:53:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:53:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:53:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:53:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:53:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:53:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csn  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csvs:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:53:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csn  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csvs:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:53:41 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_csv' is not defined"
2020-05-11,14:53:41 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 21.77ms
2020-05-11,14:53:43 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,14:53:44 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:53:44 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,14:53:45 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,14:53:45 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,14:53:45 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,14:53:45 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,14:53:45 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,14:53:45 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,14:53:45 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,14:53:45 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,14:53:45 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,14:53:45 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,14:53:45 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,14:53:45 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:53:45 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:53:45 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:53:45 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,14:53:45 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,14:53:45 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,14:53:45 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,14:53:45 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,14:53:45 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,14:53:45 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,14:53:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:53:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:53:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:53:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:53:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:53:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:53:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:53:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csn  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csvs:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:53:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csn  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csvs:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:53:50 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_csv' is not defined"
2020-05-11,14:53:50 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 327.97ms
2020-05-11,14:53:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:53:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:53:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:53:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:53:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:53:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:53:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:53:50 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:53:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csn  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csvs:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:53:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csn  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csvs:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:53:50 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_csv' is not defined"
2020-05-11,14:53:50 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 21.97ms
2020-05-11,14:54:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csvs:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csvs:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:15 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_csvs' is not defined"
2020-05-11,14:54:15 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 28.44ms
2020-05-11,14:54:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csvs:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csvs:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:15 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'keys_csvs' is not defined"
2020-05-11,14:54:15 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 28.08ms
2020-05-11,14:54:30 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:30 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:30 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:30 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:30 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:30 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:30 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.46ms
2020-05-11,14:54:30 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:30 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:30 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:30 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:30 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:30 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:30 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.55ms
2020-05-11,14:54:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.27ms
2020-05-11,14:54:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 38.83ms
2020-05-11,14:54:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.48ms
2020-05-11,14:54:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.89ms
2020-05-11,14:54:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.44ms
2020-05-11,14:54:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.08ms
2020-05-11,14:54:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.92ms
2020-05-11,14:54:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.52ms
2020-05-11,14:54:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.49ms
2020-05-11,14:54:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.28ms
2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 63.16ms
2020-05-11,14:54:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 21.71ms
2020-05-11,14:54:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 20.85ms
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:54:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.95ms
2020-05-11,14:54:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.19ms
2020-05-11,14:54:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.04ms
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:54:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:54:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:54:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:54:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:54:59 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,14:54:59 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,14:55:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 943.35ms
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:56:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:56:22 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.64ms
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:56:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:56:22 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.03ms
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:56:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:56:22 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,14:56:23 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,14:56:23 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 748.21ms
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print("SISI")\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
