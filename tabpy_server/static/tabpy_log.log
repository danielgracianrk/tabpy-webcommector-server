2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-18,18:41:18 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-18,18:41:18 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-18,18:41:18 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-18,18:41:18 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-18,18:41:18 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-18,18:41:18 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-18,18:41:18 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-18,18:41:18 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-18,18:41:18 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-18,18:41:18 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-18,18:41:18 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-18,18:41:18 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,18:41:18 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,18:41:18 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,18:41:18 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-18,18:41:18 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-18,18:41:18 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-18,18:41:18 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,18:41:18 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,18:41:18 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,18:41:18 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-18,18:41:37 [INFO] (web.py:web:2250): 200 GET / (::1) 5.56ms
2020-05-18,18:41:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-18,18:41:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-18,18:41:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-18,18:41:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Description' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Creation Time' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value '0'
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Name' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value 'TabPy Server'
2020-05-18,18:41:37 [INFO] (web.py:web:2250): 304 GET /info (::1) 5.17ms
2020-05-18,18:41:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-18,18:41:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-18,18:41:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-18,18:41:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:37 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,18:41:37 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,18:41:37 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,18:41:37 [INFO] (web.py:web:2250): 304 GET /endpoints (::1) 2.68ms
2020-05-18,18:41:46 [INFO] (web.py:web:2250): 304 GET / (::1) 0.56ms
2020-05-18,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-18,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-18,18:41:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-18,18:41:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Description' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Creation Time' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value '0'
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Name' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value 'TabPy Server'
2020-05-18,18:41:46 [INFO] (web.py:web:2250): 304 GET /info (::1) 2.40ms
2020-05-18,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-18,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-18,18:41:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-18,18:41:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,18:41:46 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,18:41:46 [INFO] (web.py:web:2250): 304 GET /endpoints (::1) 2.83ms
2020-05-18,18:41:46 [INFO] (web.py:web:2250): 304 GET / (::1) 0.57ms
2020-05-18,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-18,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-18,18:41:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-18,18:41:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Description' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Creation Time' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value '0'
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Name' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value 'TabPy Server'
2020-05-18,18:41:46 [INFO] (web.py:web:2250): 304 GET /info (::1) 2.11ms
2020-05-18,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-18,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-18,18:41:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-18,18:41:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:46 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,18:41:46 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,18:41:46 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,18:41:46 [INFO] (web.py:web:2250): 304 GET /endpoints (::1) 1.91ms
2020-05-18,18:41:49 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-18,18:41:49 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,18:41:49 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-18,18:41:54 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-18,18:41:54 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-18,18:41:54 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-18,18:41:54 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-18,18:41:54 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-18,18:41:54 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-18,18:41:54 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-18,18:41:54 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-18,18:41:54 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-18,18:41:54 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-18,18:41:54 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-18,18:41:54 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,18:41:54 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,18:41:54 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,18:41:54 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-18,18:41:54 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-18,18:41:54 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-18,18:41:54 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,18:41:54 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,18:41:54 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,18:41:54 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-18,18:41:57 [INFO] (web.py:web:2250): 200 GET / (::1) 6.14ms
2020-05-18,18:41:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-18,18:41:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-18,18:41:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-18,18:41:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Description' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Creation Time' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value '0'
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Name' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value 'TabPy Server'
2020-05-18,18:41:57 [INFO] (web.py:web:2250): 200 GET /info (::1) 3.40ms
2020-05-18,18:41:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-18,18:41:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-18,18:41:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-18,18:41:57 [INFO] (web.py:web:2250): 200 GET /tableau.png (::1) 2.04ms
2020-05-18,18:41:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-18,18:41:57 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,18:41:57 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,18:41:57 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,18:41:57 [INFO] (web.py:web:2250): 200 GET /endpoints (::1) 3.66ms
2020-05-18,18:41:57 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.52ms
2020-05-18,18:51:34 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 1.03ms
2020-05-18,18:51:34 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.80ms
2020-05-18,18:51:34 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.10ms
2020-05-18,18:51:35 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.48ms
2020-05-18,18:55:48 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 1.31ms
2020-05-18,18:55:48 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.94ms
2020-05-18,18:55:48 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.25ms
2020-05-18,18:55:49 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.55ms
2020-05-18,18:55:49 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.60ms
2020-05-18,18:55:58 [INFO] (web.py:web:2250): 304 GET / (::1) 0.63ms
2020-05-18,19:51:13 [INFO] (web.py:web:2250): 304 GET /test-danielo.html (::1) 0.53ms
2020-05-18,19:51:13 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.69ms
2020-05-18,19:51:13 [INFO] (web.py:web:2250): 304 GET /js/test-danielo.js (::1) 0.64ms
2020-05-18,19:51:13 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.54ms
2020-05-18,19:51:15 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.46ms
2020-05-18,19:52:05 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-18,19:52:06 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,19:52:06 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-18,19:52:09 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-18,19:52:09 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-18,19:52:09 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-18,19:52:09 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-18,19:52:09 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-18,19:52:09 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-18,19:52:09 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-18,19:52:09 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-18,19:52:09 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-18,19:52:09 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-18,19:52:09 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-18,19:52:09 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,19:52:09 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,19:52:09 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,19:52:09 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-18,19:52:09 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-18,19:52:09 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-18,19:52:09 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,19:52:09 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,19:52:09 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,19:52:09 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-18,19:52:18 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 1.08ms
2020-05-18,19:52:18 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.46ms
2020-05-18,19:52:19 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.43ms
2020-05-18,19:52:43 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-18,19:52:43 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,19:52:43 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-18,19:53:24 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-18,19:53:24 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-18,19:53:24 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-18,19:53:24 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-18,19:53:24 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-18,19:53:24 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-18,19:53:24 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-18,19:53:24 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-18,19:53:24 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-18,19:53:24 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-18,19:53:24 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-18,19:53:24 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,19:53:24 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,19:53:24 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,19:53:24 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-18,19:53:24 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-18,19:53:24 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-18,19:53:24 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,19:53:24 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,19:53:24 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,19:53:24 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-18,19:53:31 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-18,19:53:31 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,19:53:31 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-18,19:53:39 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-18,19:53:39 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-18,19:53:39 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-18,19:53:39 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-18,19:53:39 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-18,19:53:39 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-18,19:53:39 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-18,19:53:39 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-18,19:53:39 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-18,19:53:39 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-18,19:53:39 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-18,19:53:39 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,19:53:39 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,19:53:39 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,19:53:39 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-18,19:53:39 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-18,19:53:39 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-18,19:53:39 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,19:53:39 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,19:53:39 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,19:53:39 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-18,19:53:39 [INFO] (web.py:web:2250): 304 GET /test-danielo.html (::1) 6.54ms
2020-05-18,19:53:39 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.91ms
2020-05-18,19:53:40 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.53ms
2020-05-18,19:55:25 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 1.86ms
2020-05-18,19:55:25 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.52ms
2020-05-18,19:55:25 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.22ms
2020-05-18,19:55:25 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.48ms
2020-05-18,19:55:25 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.47ms
2020-05-18,19:55:30 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 0.87ms
2020-05-18,19:55:30 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.59ms
2020-05-18,19:55:30 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 0.85ms
2020-05-18,19:55:31 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.48ms
2020-05-18,19:55:31 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.46ms
2020-05-18,19:55:38 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-18,19:55:39 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,19:55:39 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-18,19:55:46 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-18,19:55:46 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-18,19:55:46 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-18,19:55:46 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-18,19:55:46 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-18,19:55:46 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-18,19:55:46 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-18,19:55:46 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-18,19:55:46 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-18,19:55:46 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-18,19:55:46 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-18,19:55:46 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,19:55:46 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,19:55:46 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,19:55:46 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-18,19:55:46 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-18,19:55:46 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-18,19:55:46 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-18,19:55:46 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-18,19:55:46 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-18,19:55:46 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-18,19:55:53 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 5.56ms
2020-05-18,19:55:53 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.47ms
2020-05-18,19:55:53 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 0.98ms
2020-05-18,19:55:54 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.44ms
2020-05-18,19:55:54 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.44ms
2020-05-18,21:03:35 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 1.39ms
2020-05-18,21:03:35 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.94ms
2020-05-18,21:03:35 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.51ms
2020-05-18,21:03:37 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.55ms
2020-05-18,21:03:37 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.46ms
2020-05-18,23:12:57 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 2.66ms
2020-05-18,23:12:57 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.47ms
2020-05-18,23:12:57 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.35ms
2020-05-18,23:12:58 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.48ms
2020-05-18,23:12:58 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.51ms
2020-05-18,23:17:24 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 2.89ms
2020-05-18,23:17:24 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.52ms
2020-05-18,23:17:24 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 1.63ms
2020-05-18,23:17:26 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.50ms
2020-05-18,23:17:26 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.51ms
2020-05-19,12:14:52 [INFO] (web.py:web:2250): 304 GET / (::1) 13.11ms
2020-05-19,12:14:53 [INFO] (web.py:web:2250): 304 GET /test-danielo.html (::1) 0.60ms
2020-05-19,12:14:53 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 1.14ms
2020-05-19,12:14:53 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.77ms
2020-05-19,12:14:54 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.54ms
2020-05-19,12:15:08 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-19,12:15:08 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:15:08 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-19,12:15:10 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-19,12:15:10 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-19,12:15:10 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-19,12:15:10 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-19,12:15:10 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-19,12:15:10 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-19,12:15:10 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-19,12:15:10 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-19,12:15:10 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-19,12:15:10 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-19,12:15:10 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-19,12:15:10 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-19,12:15:10 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-19,12:15:10 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-19,12:15:10 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-19,12:15:10 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-19,12:15:10 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-19,12:15:10 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-19,12:15:10 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-19,12:15:10 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-19,12:15:10 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-19,12:15:13 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 9.89ms
2020-05-19,12:15:13 [INFO] (web.py:web:2250): 200 GET /js/csvtosjon.js (::1) 12.85ms
2020-05-19,12:15:17 [INFO] (web.py:web:2250): 304 GET /test-danielo.html (::1) 0.56ms
2020-05-19,12:15:19 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 0.86ms
2020-05-19,12:15:19 [INFO] (web.py:web:2250): 200 GET /js/csvtosjon.js (::1) 9.83ms
2020-05-19,12:15:19 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.11ms
2020-05-19,12:15:19 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.54ms
2020-05-19,12:16:38 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 0.88ms
2020-05-19,12:16:38 [INFO] (web.py:web:2250): 200 GET /js/csvtosjon.js (::1) 8.11ms
2020-05-19,12:16:38 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 0.94ms
2020-05-19,12:16:38 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.42ms
2020-05-19,12:17:26 [INFO] (web.py:web:2250): 304 GET /test-danielo.html (::1) 0.43ms
2020-05-19,12:18:00 [WARNING] (web.py:web:2250): 404 GET /article-table-integration.html (::1) 0.48ms
2020-05-19,12:18:18 [WARNING] (web.py:web:2250): 404 GET /article-table-integration.html (::1) 0.47ms
2020-05-19,12:18:26 [INFO] (web.py:web:2250): 200 GET /article-tableau-integration.html (::1) 1.35ms
2020-05-19,12:18:26 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.74ms
2020-05-19,12:18:26 [INFO] (web.py:web:2250): 200 GET /js/article-tableau-integration.js (::1) 1.30ms
2020-05-19,12:18:27 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.52ms
2020-05-19,12:18:36 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.64ms
2020-05-19,12:18:36 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.51ms
2020-05-19,12:18:37 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.47ms
2020-05-19,12:18:37 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.48ms
2020-05-19,12:19:12 [INFO] (web.py:web:2250): 200 GET /article-tableau-integration.html (::1) 0.88ms
2020-05-19,12:19:12 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.68ms
2020-05-19,12:19:12 [INFO] (web.py:web:2250): 200 GET /js/article-tableau-integration.js (::1) 1.11ms
2020-05-19,12:19:12 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.47ms
2020-05-19,12:19:12 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.46ms
2020-05-19,12:20:54 [INFO] (web.py:web:2250): 200 GET /article-tableau-integration.html (::1) 0.69ms
2020-05-19,12:20:54 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.47ms
2020-05-19,12:20:54 [INFO] (web.py:web:2250): 200 GET /js/article-tableau-integration.js (::1) 0.68ms
2020-05-19,12:20:55 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.48ms
2020-05-19,12:20:55 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.47ms
2020-05-19,12:21:32 [INFO] (web.py:web:2250): 304 GET /article-tableau-integration.html (::1) 0.53ms
2020-05-19,12:21:32 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.82ms
2020-05-19,12:21:32 [INFO] (web.py:web:2250): 304 GET /js/article-tableau-integration.js (::1) 0.68ms
2020-05-19,12:21:32 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.48ms
2020-05-19,12:21:41 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.70ms
2020-05-19,12:21:41 [INFO] (web.py:web:2250): 304 GET /js/article-tableau-integration.js (::1) 0.77ms
2020-05-19,12:21:41 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.51ms
2020-05-19,12:21:43 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.50ms
2020-05-19,12:21:43 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.54ms
2020-05-19,12:21:52 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 1.00ms
2020-05-19,12:21:52 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.52ms
2020-05-19,12:21:53 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.91ms
2020-05-19,12:21:59 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-19,12:21:59 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:21:59 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-19,12:22:01 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-19,12:22:01 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-19,12:22:01 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-19,12:22:01 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-19,12:22:01 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-19,12:22:01 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-19,12:22:01 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-19,12:22:01 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-19,12:22:01 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-19,12:22:01 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-19,12:22:01 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-19,12:22:01 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-19,12:22:01 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-19,12:22:01 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-19,12:22:01 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-19,12:22:01 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-19,12:22:01 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-19,12:22:01 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-19,12:22:01 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-19,12:22:01 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-19,12:22:01 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-19,12:22:03 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.93ms
2020-05-19,12:22:04 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.64ms
2020-05-19,12:22:59 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-19,12:22:59 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:22:59 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-19,12:25:40 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-19,12:25:40 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-19,12:25:40 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-19,12:25:40 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-19,12:25:40 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-19,12:25:40 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-19,12:25:40 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-19,12:25:40 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-19,12:25:40 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-19,12:25:40 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-19,12:25:40 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-19,12:25:40 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-19,12:25:40 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-19,12:25:40 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-19,12:25:40 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-19,12:25:40 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-19,12:25:40 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-19,12:25:40 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-19,12:25:40 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-19,12:25:40 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-19,12:25:40 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-19,12:25:51 [INFO] (web.py:web:2250): 200 GET /article-tableau-integration.html (::1) 6.74ms
2020-05-19,12:25:51 [INFO] (web.py:web:2250): 200 GET /js/article-tableau-integration.js (::1) 1.99ms
2020-05-19,12:26:52 [INFO] (web.py:web:2250): 304 GET /article-tableau-integration.html (::1) 0.76ms
2020-05-19,12:26:52 [INFO] (web.py:web:2250): 304 GET /js/article-tableau-integration.js (::1) 0.88ms
2020-05-19,12:28:15 [INFO] (web.py:web:2250): 304 GET /article-tableau-integration.html (::1) 0.66ms
2020-05-19,12:28:15 [INFO] (web.py:web:2250): 304 GET /js/article-tableau-integration.js (::1) 0.64ms
2020-05-19,12:36:23 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-19,12:36:23 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:36:23 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-19,12:36:40 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-19,12:36:40 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-19,12:36:40 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-19,12:36:40 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-19,12:36:40 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-19,12:36:40 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-19,12:36:40 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-19,12:36:40 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-19,12:36:40 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-19,12:36:40 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-19,12:36:40 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-19,12:36:40 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-19,12:36:40 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-19,12:36:40 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-19,12:36:40 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-19,12:36:40 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-19,12:36:40 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-19,12:36:40 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-19,12:36:40 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-19,12:36:40 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-19,12:36:40 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-19,12:36:44 [INFO] (web.py:web:2250): 200 GET /article-tableau-integration.html (::1) 6.84ms
2020-05-19,12:36:44 [INFO] (web.py:web:2250): 200 GET /js/article-tableau-integration.js (::1) 2.16ms
2020-05-19,12:48:17 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-19,12:48:17 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-19,12:48:17 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-26,17:35:31 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-26,17:35:31 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-26,17:35:31 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-26,17:35:31 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-26,17:35:31 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-26,17:35:31 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-26,17:35:31 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-26,17:35:31 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-26,17:35:31 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-26,17:35:31 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-26,17:35:31 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-26,17:35:31 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-26,17:35:31 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-26,17:35:31 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-26,17:35:31 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-26,17:35:31 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-26,17:35:31 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-26,17:35:31 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-26,17:35:31 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-26,17:35:31 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-26,17:35:31 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-26,17:35:41 [INFO] (web.py:web:2250): 200 GET / (::1) 10.50ms
2020-05-26,17:35:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-26,17:35:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-26,17:35:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-26,17:35:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Description' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Creation Time' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value '0'
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Name' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value 'TabPy Server'
2020-05-26,17:35:42 [INFO] (web.py:web:2250): 200 GET /info (::1) 2.53ms
2020-05-26,17:35:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-26,17:35:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-26,17:35:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-26,17:35:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-26,17:35:42 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-26,17:35:42 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-26,17:35:42 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-26,17:35:42 [INFO] (web.py:web:2250): 200 GET /endpoints (::1) 1.96ms
2020-05-26,17:35:42 [INFO] (web.py:web:2250): 200 GET /tableau.png (::1) 0.85ms
2020-05-26,17:35:42 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.40ms
2020-05-26,17:35:49 [INFO] (web.py:web:2250): 200 GET /article-tableau-integration.html (::1) 1.27ms
2020-05-26,17:35:49 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 1.59ms
2020-05-26,17:35:49 [INFO] (web.py:web:2250): 200 GET /js/article-tableau-integration.js (::1) 1.57ms
2020-05-26,17:35:51 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.49ms
2020-05-26,17:36:50 [INFO] (web.py:web:2250): 200 GET /article-tableau-integration.html (::1) 1.98ms
2020-05-26,17:36:50 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.72ms
2020-05-26,17:36:50 [INFO] (web.py:web:2250): 200 GET /js/article-tableau-integration.js (::1) 1.85ms
2020-05-26,17:36:51 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.56ms
2020-05-26,17:36:51 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 1.06ms
2020-05-26,17:36:57 [INFO] (web.py:web:2250): 200 GET /article-tableau-integration.html (::1) 1.08ms
2020-05-26,17:36:57 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.51ms
2020-05-26,17:36:57 [INFO] (web.py:web:2250): 200 GET /js/article-tableau-integration.js (::1) 1.12ms
2020-05-26,17:36:58 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.49ms
2020-05-26,17:36:58 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.59ms
2020-05-26,17:38:21 [INFO] (web.py:web:2250): 304 GET /article-tableau-integration.html (::1) 0.62ms
2020-05-26,17:38:21 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.62ms
2020-05-26,17:38:21 [INFO] (web.py:web:2250): 304 GET /js/article-tableau-integration.js (::1) 0.61ms
2020-05-26,17:38:21 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.49ms
2020-05-26,17:38:23 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.47ms
2020-05-26,17:38:23 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.67ms
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-27,17:19:57 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-27,17:19:57 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,17:19:57 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-27,17:19:57 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,17:19:57 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,17:19:57 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,17:19:57 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-27,17:19:57 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-27,17:19:57 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-27,17:19:57 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,17:19:57 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,17:19:57 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:19:57 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:19:57 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:19:57 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-27,17:19:57 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-27,17:19:57 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,17:19:57 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:19:57 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:19:57 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:19:57 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-27,17:20:07 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-27,17:20:07 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,17:20:07 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-27,17:21:56 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-27,17:21:56 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,17:21:56 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-27,17:21:56 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,17:21:56 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,17:21:56 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,17:21:56 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-27,17:21:56 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-27,17:21:56 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-27,17:21:56 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,17:21:56 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,17:21:56 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:21:56 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:21:56 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:21:56 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-27,17:21:56 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-27,17:21:56 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,17:21:56 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:21:56 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:21:56 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:21:56 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-27,17:22:13 [INFO] (web.py:web:2250): 200 GET /test-danielo.html (::1) 10.06ms
2020-05-27,17:22:14 [INFO] (web.py:web:2250): 200 GET /js/csvtosjon.js (::1) 9.14ms
2020-05-27,17:22:14 [INFO] (web.py:web:2250): 200 GET /js/test-danielo.js (::1) 1.73ms
2020-05-27,17:22:15 [WARNING] (web.py:web:2250): 404 GET /favicon.ico (::1) 0.55ms
2020-05-27,17:23:00 [INFO] (web.py:web:2250): 304 GET /article-tableau-integration.html (::1) 0.93ms
2020-05-27,17:23:00 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 1.13ms
2020-05-27,17:23:00 [INFO] (web.py:web:2250): 304 GET /js/article-tableau-integration.js (::1) 1.12ms
2020-05-27,17:23:00 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.44ms
2020-05-27,17:24:03 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-27,17:24:03 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,17:24:03 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-27,17:24:28 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-27,17:24:28 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,17:24:28 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-27,17:24:28 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,17:24:28 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,17:24:28 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,17:24:28 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-27,17:24:28 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-27,17:24:28 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-27,17:24:28 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,17:24:28 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,17:24:28 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:24:28 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:24:28 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:24:28 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-27,17:24:28 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-27,17:24:28 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,17:24:28 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:24:28 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:24:28 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:24:28 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-27,17:38:26 [WARNING] (web.py:web:2250): 404 GET /test (::1) 1.47ms
2020-05-27,17:39:11 [INFO] (web.py:web:2250): 200 GET /test.py (::1) 5.44ms
2020-05-27,17:39:29 [INFO] (web.py:web:2250): 304 GET /test.py (::1) 0.69ms
2020-05-27,17:39:30 [INFO] (web.py:web:2250): 304 GET /test.py (::1) 0.63ms
2020-05-27,17:39:33 [INFO] (web.py:web:2250): 304 GET /test.py (::1) 0.55ms
2020-05-27,17:39:34 [INFO] (web.py:web:2250): 304 GET /test.py (::1) 0.52ms
2020-05-27,17:39:35 [INFO] (web.py:web:2250): 304 GET /test.py (::1) 0.53ms
2020-05-27,17:39:53 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-27,17:39:54 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,17:39:54 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-27,17:39:56 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-27,17:39:56 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,17:39:56 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-27,17:39:56 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,17:39:56 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,17:39:56 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,17:39:56 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-27,17:39:56 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-27,17:39:56 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-27,17:39:56 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,17:39:56 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,17:39:56 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:39:56 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:39:56 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:39:56 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-27,17:39:56 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-27,17:39:56 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,17:39:56 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:39:56 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:39:56 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:39:56 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-27,17:39:59 [INFO] (web.py:web:2250): 200 GET /test.py (::1) 7.73ms
2020-05-27,17:41:16 [INFO] (web.py:web:2250): 304 GET /test.py (::1) 0.65ms
2020-05-27,17:41:23 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-27,17:41:23 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,17:41:23 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-27,17:41:24 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-27,17:41:24 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,17:41:24 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-27,17:41:24 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,17:41:24 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,17:41:24 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,17:41:24 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-27,17:41:24 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-27,17:41:24 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-27,17:41:24 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,17:41:24 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,17:41:24 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:41:24 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:41:24 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:41:24 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-27,17:41:24 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-27,17:41:24 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,17:41:24 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:41:24 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:41:24 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:41:24 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-27,17:41:27 [INFO] (web.py:web:2250): 200 GET /test.py (::1) 5.81ms
2020-05-27,17:42:44 [INFO] (web.py:web:2250): 304 GET / (::1) 1.09ms
2020-05-27,17:42:44 [INFO] (web.py:web:2250): 200 GET /tableau.png (::1) 2.22ms
2020-05-27,17:42:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,17:42:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,17:42:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,17:42:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,17:42:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,17:42:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,17:42:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,17:42:44 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,17:42:44 [INFO] (web.py:web:2250): 304 GET /endpoints (::1) 5.35ms
2020-05-27,17:42:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Description' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Creation Time' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value '0'
2020-05-27,17:42:44 [DEBUG] (state.py:state:596): Loading option 'Name' from section [Service Info]...
2020-05-27,17:42:44 [DEBUG] (state.py:state:616): Returning value 'TabPy Server'
2020-05-27,17:42:44 [INFO] (web.py:web:2250): 304 GET /info (::1) 6.30ms
2020-05-27,18:01:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,18:01:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,18:01:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,18:01:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,18:01:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,18:01:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:01:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,18:01:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:01:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,18:01:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:01:59 [DEBUG] (state.py:state:596): Loading option 'Description' from section [Service Info]...
2020-05-27,18:01:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:01:59 [DEBUG] (state.py:state:596): Loading option 'Creation Time' from section [Service Info]...
2020-05-27,18:01:59 [DEBUG] (state.py:state:616): Returning value '0'
2020-05-27,18:01:59 [DEBUG] (state.py:state:596): Loading option 'Name' from section [Service Info]...
2020-05-27,18:01:59 [DEBUG] (state.py:state:616): Returning value 'TabPy Server'
2020-05-27,18:01:59 [INFO] (web.py:web:2250): 304 GET /info (::1) 2.72ms
2020-05-27,18:04:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,18:04:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,18:04:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,18:04:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,18:04:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,18:04:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:04:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,18:04:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:04:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,18:04:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:04:57 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,18:04:57 [INFO] (web.py:web:2250): 200 GET /status (::1) 2.02ms
2020-05-27,18:05:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,18:05:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,18:05:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,18:05:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,18:05:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,18:05:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:05:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,18:05:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:05:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,18:05:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:05:14 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,18:05:14 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,18:05:14 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,18:05:14 [INFO] (web.py:web:2250): 304 GET /endpoints (::1) 1.84ms
2020-05-27,18:25:23 [WARNING] (web.py:web:2250): 404 GET /proxy (::1) 0.84ms
2020-05-27,18:25:36 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-27,18:25:36 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,18:25:36 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,18:38:50 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,18:38:50 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,18:38:50 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,18:38:50 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,18:38:50 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,18:38:50 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,18:38:50 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,18:38:50 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,18:38:50 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,18:38:50 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,18:38:50 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,18:38:50 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,18:38:50 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,18:38:50 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,18:38:50 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,18:38:50 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,18:38:50 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,18:38:50 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,18:38:50 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,18:38:50 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,18:38:50 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,18:38:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,18:38:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,18:38:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,18:38:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,18:38:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,18:38:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:38:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,18:38:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:38:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,18:38:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,18:38:58 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,18:38:58 [INFO] (web.py:web:2250): 200 GET /proxy (::1) 2.32ms
2020-05-27,19:51:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,19:51:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,19:51:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,19:51:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,19:51:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,19:51:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,19:51:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,19:51:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,19:51:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,19:51:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,19:51:53 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,19:51:53 [INFO] (web.py:web:2250): 304 GET /proxy (::1) 5.54ms
2020-05-27,19:52:02 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,19:52:02 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,19:52:02 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,20:01:24 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,20:01:24 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,20:01:24 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,20:01:24 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,20:01:24 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,20:01:24 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,20:01:24 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,20:01:24 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,20:01:24 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,20:01:24 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,20:01:24 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,20:01:24 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:01:24 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:01:24 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:01:24 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,20:01:24 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,20:01:24 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,20:01:24 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:01:24 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:01:24 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:01:24 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,20:01:29 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:01:29 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:01:29 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:01:29 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:01:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:01:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:01:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:01:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:01:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:01:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:01:29 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,20:01:29 [INFO] (web.py:web:2250): 304 GET /proxy (::1) 2.65ms
2020-05-27,20:03:05 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:03:05 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:03:05 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:03:05 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:03:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:03:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:03:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:03:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:05 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,20:03:05 [INFO] (web.py:web:2250): 304 GET /proxy (::1) 2.42ms
2020-05-27,20:03:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:03:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:03:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:03:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:54 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,20:03:54 [INFO] (web.py:web:2250): 304 GET /proxy (::1) 1.86ms
2020-05-27,20:03:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:03:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:03:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:03:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:03:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:03:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:03:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:03:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:03:55 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,20:03:55 [INFO] (web.py:web:2250): 304 GET /proxy (::1) 1.64ms
2020-05-27,20:04:01 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,20:04:01 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:04:01 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,20:04:04 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,20:04:04 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,20:04:04 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,20:04:04 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,20:04:04 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,20:04:04 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,20:04:04 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,20:04:04 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,20:04:04 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,20:04:04 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,20:04:04 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,20:04:04 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:04:04 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:04:04 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:04:04 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,20:04:04 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,20:04:04 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,20:04:04 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:04:04 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:04:04 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:04:04 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,20:04:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:04:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:04:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:04:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:04:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:04:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:04:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:04:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:04:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:04:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:04:09 [DEBUG] (base_handler.py:base_handler:121): Found models: <tabpy.tabpy_server.handlers.proxy_handler.ProxyHandler object at 0x101f99090>
2020-05-27,20:04:09 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 27, in get
    self.write(json.dumps(self))
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type ProxyHandler is not JSON serializable
2020-05-27,20:04:09 [ERROR] (web.py:web:2250): 500 GET /proxy (::1) 6.72ms
2020-05-27,20:09:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:09:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:09:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:09:16 [DEBUG] (base_handler.py:base_handler:121): Processing GET for /endpoints/mymodel
2020-05-27,20:09:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:09:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:09:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:09:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:09:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:09:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:09:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:09:16 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:09:16 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:09:16 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:09:16 [ERROR] (base_handler.py:base_handler:121): Responding with status=404, message="Unknown endpoint", info="Endpoint mymodel is not found"
2020-05-27,20:09:16 [WARNING] (web.py:web:2250): 404 GET /endpoints/mymodel (::1) 2.80ms
2020-05-27,20:27:32 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,20:27:32 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:27:32 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,20:27:35 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,20:27:35 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,20:27:35 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,20:27:35 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,20:27:35 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,20:27:35 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,20:27:35 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,20:27:35 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,20:27:35 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,20:27:35 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,20:27:35 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,20:27:35 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:27:35 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:27:35 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:27:35 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,20:27:35 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,20:27:35 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,20:27:35 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:27:35 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:27:35 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:27:35 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,20:27:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:27:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:27:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:27:42 [DEBUG] (base_handler.py:base_handler:121): Processing GET for /endpoints/mymodel
2020-05-27,20:27:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:27:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:27:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:27:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:27:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:27:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:27:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:27:42 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:27:42 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:27:42 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:27:42 [ERROR] (base_handler.py:base_handler:121): Responding with status=404, message="Unknown endpoint", info="Endpoint mymodel is not found"
2020-05-27,20:27:42 [WARNING] (web.py:web:2250): 404 GET /endpoints/mymodel (::1) 2.62ms
2020-05-27,20:27:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:27:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:27:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:27:54 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
TypeError: get() missing 1 required positional argument: 'url'
2020-05-27,20:27:54 [ERROR] (web.py:web:2250): 500 GET /proxy (::1) 3.56ms
2020-05-27,20:29:52 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:29:52 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:29:52 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:29:52 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:29:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:29:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:29:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:29:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:52 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:29:52 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:29:52 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:29:52 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:29:52 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:29:52 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:29:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:29:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:29:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:29:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:52 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:29:52 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:29:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 729.97ms
2020-05-27,20:29:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 763.24ms
2020-05-27,20:29:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:29:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:29:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:29:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:29:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:29:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:29:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:29:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:29:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:29:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:29:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:29:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:29:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:29:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:29:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:29:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:29:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:29:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:29:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:29:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 107.53ms
2020-05-27,20:29:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 144.68ms
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:30:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:30:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 44.56ms
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:30:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:30:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 51.71ms
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-27,20:30:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-27,20:30:12 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-27,20:30:12 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="ConnectionError : HTTPConnectionPool(host='127.0.0.1', port=3000): Max retries exceeded with url: /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x10bcfd690>: Failed to establish a new connection: [Errno 61] Connection refused'))"
2020-05-27,20:30:12 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 33.95ms
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:30:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:30:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 40.08ms
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:30:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:30:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 43.74ms
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-27,20:30:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-27,20:30:14 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-27,20:30:14 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="ConnectionError : HTTPConnectionPool(host='127.0.0.1', port=3000): Max retries exceeded with url: /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x11c87d290>: Failed to establish a new connection: [Errno 61] Connection refused'))"
2020-05-27,20:30:14 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 24.67ms
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:30:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:30:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 19.50ms
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:30:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:30:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 40.51ms
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:30:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:30:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:30:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:30:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-27,20:30:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-27,20:30:17 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-27,20:30:17 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="ConnectionError : HTTPConnectionPool(host='127.0.0.1', port=3000): Max retries exceeded with url: /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x11c86ee50>: Failed to establish a new connection: [Errno 61] Connection refused'))"
2020-05-27,20:30:17 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 12.43ms
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:32:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:32:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:32:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:32:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 45.20ms
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:32:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:32:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:32:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:32:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 42.17ms
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:32:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:32:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:32:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-27,20:32:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-27,20:32:20 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-27,20:32:25 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-27,20:32:25 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5246.15ms
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:32:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:32:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:32:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:32:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 36.98ms
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:32:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:32:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:32:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:32:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 27.35ms
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:32:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:32:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:32:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-27,20:32:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-27,20:32:34 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-27,20:32:34 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-27,20:32:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 542.42ms
2020-05-27,20:32:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:32:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:32:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:32:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:32:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:32:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:32:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:32:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:49 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:32:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:32:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 21.17ms
2020-05-27,20:32:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:32:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:32:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:32:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:32:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:32:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:32:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:32:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:32:49 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:32:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:32:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.88ms
2020-05-27,20:44:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:44:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:44:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:44:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:44:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:44:25 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.73ms
2020-05-27,20:44:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:44:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:44:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:44:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:44:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:44:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:44:25 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 33.54ms
2020-05-27,20:44:26 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:44:26 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:44:26 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:44:26 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:44:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:44:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:44:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:44:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:26 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:44:26 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:44:26 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.98ms
2020-05-27,20:44:26 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:44:26 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:44:26 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:44:26 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:44:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:44:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:44:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:44:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:44:26 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:44:26 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:44:26 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 33.10ms
2020-05-27,20:44:35 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,20:44:35 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:44:35 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,20:45:07 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,20:45:07 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,20:45:07 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,20:45:07 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,20:45:07 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,20:45:07 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,20:45:07 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,20:45:07 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,20:45:07 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,20:45:07 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,20:45:07 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,20:45:07 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:45:07 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:45:07 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:45:07 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,20:45:07 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,20:45:07 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,20:45:07 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:45:07 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:45:07 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:45:07 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,20:45:12 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:12 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:12 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:12 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:12 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:12 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:12 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 476.65ms
2020-05-27,20:45:12 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:12 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:12 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:12 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:12 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:12 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:12 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 6.09ms
2020-05-27,20:45:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:15 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:15 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 4.93ms
2020-05-27,20:45:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:15 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:15 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.00ms
2020-05-27,20:45:26 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,20:45:26 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:45:26 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,20:45:41 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,20:45:41 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,20:45:41 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,20:45:41 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,20:45:41 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,20:45:41 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,20:45:41 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,20:45:41 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,20:45:41 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,20:45:41 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,20:45:41 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,20:45:41 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:45:41 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:45:41 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:45:41 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,20:45:41 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,20:45:41 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,20:45:41 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:45:41 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:45:41 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:45:41 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,20:45:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:46 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 279.44ms
2020-05-27,20:45:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:46 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.21ms
2020-05-27,20:45:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:49 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.69ms
2020-05-27,20:45:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:49 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 4.81ms
2020-05-27,20:45:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:51 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.42ms
2020-05-27,20:45:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:51 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.51ms
2020-05-27,20:45:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:54 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.17ms
2020-05-27,20:45:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:45:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:45:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:45:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:45:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:45:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:45:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:45:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:45:54 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:45:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:45:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.55ms
2020-05-27,20:45:58 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,20:45:58 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:45:58 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,20:46:03 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,20:46:03 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,20:46:03 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,20:46:03 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,20:46:03 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,20:46:03 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,20:46:03 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,20:46:03 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,20:46:03 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,20:46:03 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,20:46:03 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,20:46:03 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:46:03 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:46:03 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:46:03 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,20:46:03 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,20:46:03 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,20:46:03 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:46:03 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:46:03 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:46:03 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,20:46:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:09 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 302.73ms
2020-05-27,20:46:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:09 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.75ms
2020-05-27,20:46:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:19 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:19 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.52ms
2020-05-27,20:46:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:19 [DEBUG] (base_handler.py:base_handler:121): DANIELO: |Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:19 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.77ms
2020-05-27,20:46:47 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,20:46:47 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:46:47 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,20:46:50 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,20:46:50 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,20:46:50 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,20:46:50 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,20:46:50 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,20:46:50 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,20:46:50 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,20:46:50 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,20:46:50 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,20:46:50 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,20:46:50 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,20:46:50 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:46:50 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:46:50 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:46:50 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,20:46:50 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,20:46:50 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,20:46:50 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:46:50 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:46:50 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:46:50 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,20:46:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 259.68ms
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 93.45ms
2020-05-27,20:46:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 493.97ms
2020-05-27,20:46:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 64.77ms
2020-05-27,20:46:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 71.87ms
2020-05-27,20:46:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 59.05ms
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-27,20:46:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-27,20:46:55 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-27,20:46:56 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-27,20:46:56 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 1146.78ms
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.29ms
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-27,20:46:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-27,20:46:59 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 24.78ms
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:46:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:46:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:46:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:46:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-27,20:46:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-27,20:46:59 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-27,20:47:00 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-27,20:47:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 445.82ms
2020-05-27,20:52:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:52:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:52:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:52:14 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
TypeError: get() missing 1 required positional argument: 'url'
2020-05-27,20:52:14 [ERROR] (web.py:web:2250): 500 GET /proxy (::1) 7.76ms
2020-05-27,20:52:21 [WARNING] (web.py:web:2250): 404 GET /proxy/hola (::1) 0.65ms
2020-05-27,20:53:45 [WARNING] (web.py:web:2250): 404 GET /endpoints/hola/nsnenen (::1) 0.85ms
2020-05-27,20:53:50 [WARNING] (web.py:web:2250): 404 GET /endpoints/hola/ (::1) 0.51ms
2020-05-27,20:53:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:53:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:53:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:53:53 [DEBUG] (base_handler.py:base_handler:121): Processing GET for /endpoints/hola
2020-05-27,20:53:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:53:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:53:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:53:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:53:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:53:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:53:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:53:53 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:53:53 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:53:53 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:53:53 [ERROR] (base_handler.py:base_handler:121): Responding with status=404, message="Unknown endpoint", info="Endpoint hola is not found"
2020-05-27,20:53:53 [WARNING] (web.py:web:2250): 404 GET /endpoints/hola (::1) 2.51ms
2020-05-27,20:56:30 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:56:30 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:56:30 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:56:30 [DEBUG] (base_handler.py:base_handler:121): Processing GET for /endpoints/hola
2020-05-27,20:56:30 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:56:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:56:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:56:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:56:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:56:30 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:56:30 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:56:30 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:56:30 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:56:30 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:56:30 [ERROR] (base_handler.py:base_handler:121): Responding with status=404, message="Unknown endpoint", info="Endpoint hola is not found"
2020-05-27,20:56:30 [WARNING] (web.py:web:2250): 404 GET /endpoints/hola (::1) 2.47ms
2020-05-27,20:56:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:56:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:56:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:56:38 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
TypeError: get() missing 1 required positional argument: 'url'
2020-05-27,20:56:38 [ERROR] (web.py:web:2250): 500 GET /proxy (::1) 1.10ms
2020-05-27,20:56:43 [WARNING] (web.py:web:2250): 404 GET /proxy/lala (::1) 0.51ms
2020-05-27,20:56:59 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,20:56:59 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:56:59 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,20:57:02 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,20:57:02 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,20:57:02 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,20:57:02 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,20:57:02 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,20:57:02 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,20:57:02 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,20:57:02 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,20:57:02 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,20:57:02 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,20:57:02 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,20:57:02 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:57:02 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:57:02 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:57:02 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,20:57:02 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,20:57:02 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,20:57:02 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,20:57:02 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,20:57:02 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,20:57:02 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,20:57:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:57:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:57:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:57:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:57:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:57:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:57:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:57:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:09 [DEBUG] (base_handler.py:base_handler:121): Found models: <tabpy.tabpy_server.handlers.proxy_handler.ProxyHandler object at 0x110c2e090>
2020-05-27,20:57:09 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 27, in get
    self.write(json.dumps(self))
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type ProxyHandler is not JSON serializable
2020-05-27,20:57:09 [ERROR] (web.py:web:2250): 500 GET /proxy/lala (::1) 6.37ms
2020-05-27,20:57:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:57:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:57:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:57:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:57:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:57:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:57:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:57:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:11 [DEBUG] (base_handler.py:base_handler:121): Found models: <tabpy.tabpy_server.handlers.proxy_handler.ProxyHandler object at 0x110c20f90>
2020-05-27,20:57:11 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 27, in get
    self.write(json.dumps(self))
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type ProxyHandler is not JSON serializable
2020-05-27,20:57:11 [ERROR] (web.py:web:2250): 500 GET /proxy/lala (::1) 2.60ms
2020-05-27,20:57:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,20:57:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,20:57:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,20:57:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,20:57:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,20:57:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,20:57:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,20:57:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,20:57:11 [DEBUG] (base_handler.py:base_handler:121): Found models: <tabpy.tabpy_server.handlers.proxy_handler.ProxyHandler object at 0x110c20210>
2020-05-27,20:57:11 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 27, in get
    self.write(json.dumps(self))
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type ProxyHandler is not JSON serializable
2020-05-27,20:57:11 [ERROR] (web.py:web:2250): 500 GET /proxy/lala (::1) 2.12ms
2020-05-27,21:01:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:01:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:01:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:01:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:01:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:01:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:01:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:01:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:01:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:01:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:01:46 [DEBUG] (base_handler.py:base_handler:121): Found models: <tabpy.tabpy_server.handlers.proxy_handler.ProxyHandler object at 0x110c20f90>
2020-05-27,21:01:46 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 27, in get
    self.write(json.dumps(status_dict))
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type ProxyHandler is not JSON serializable
2020-05-27,21:01:46 [ERROR] (web.py:web:2250): 500 GET /proxy/lala (::1) 2.79ms
2020-05-27,21:01:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:01:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:01:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:01:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:01:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:01:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:01:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:01:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:01:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:01:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:01:47 [DEBUG] (base_handler.py:base_handler:121): Found models: <tabpy.tabpy_server.handlers.proxy_handler.ProxyHandler object at 0x110c20cd0>
2020-05-27,21:01:47 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 27, in get
    self.write(json.dumps(status_dict))
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type ProxyHandler is not JSON serializable
2020-05-27,21:01:47 [ERROR] (web.py:web:2250): 500 GET /proxy/lala (::1) 2.55ms
2020-05-27,21:02:00 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:02:00 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:02:00 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:02:02 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,21:02:02 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:02:02 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,21:02:02 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:02:02 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:02:02 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:02:02 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,21:02:02 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,21:02:02 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:02:02 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:02:02 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:02:02 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:02:02 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:02:02 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:02:02 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:02:02 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:02:02 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:02:02 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:02:02 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:02:02 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:02:02 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:02:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:02:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:02:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:02:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:02:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:02:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:02:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:02:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:02:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:02:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:02:09 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:02:09 [INFO] (web.py:web:2250): 200 GET /proxy/lala (::1) 2.27ms
2020-05-27,21:05:32 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:05:32 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:05:32 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:05:32 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:05:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:05:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:05:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:05:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:32 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:05:32 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 2.18ms
2020-05-27,21:05:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:05:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:05:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:05:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:05:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:05:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:05:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:05:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:54 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:05:54 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.56ms
2020-05-27,21:05:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:05:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:05:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:05:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:05:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:05:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:05:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:05:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:57 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:05:57 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.64ms
2020-05-27,21:05:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:05:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:05:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:05:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:05:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:05:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:05:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:05:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:57 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:05:57 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.62ms
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:05:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:05:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:05:58 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.64ms
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:05:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:05:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:05:58 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.91ms
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:05:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:05:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:05:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:58 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:05:58 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.64ms
2020-05-27,21:05:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:05:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:05:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:05:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:05:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:05:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:05:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:05:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:05:59 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:05:59 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.65ms
2020-05-27,21:06:23 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:06:23 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:06:23 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:06:24 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,21:06:24 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:06:24 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,21:06:24 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:06:24 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:06:24 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:06:24 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,21:06:24 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,21:06:24 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:06:24 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:06:24 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:06:24 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:06:24 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:06:24 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:06:24 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:06:24 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:06:24 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:06:24 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:06:24 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:06:24 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:06:24 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:06:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:06:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:06:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:06:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:06:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:06:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:06:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:06:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:27 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:06:27 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 2.73ms
2020-05-27,21:06:29 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:06:29 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:06:29 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:06:29 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:06:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:06:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:06:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:06:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:29 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:06:29 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.65ms
2020-05-27,21:06:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:06:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:06:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:06:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:06:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:06:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:06:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:06:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:33 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:06:33 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.65ms
2020-05-27,21:06:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:06:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:06:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:06:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:06:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:06:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:06:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:06:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:34 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:06:34 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.68ms
2020-05-27,21:06:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:06:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:06:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:06:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:06:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:06:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:06:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:06:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:35 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:06:35 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 2.33ms
2020-05-27,21:06:51 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:06:51 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:06:51 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:06:52 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-05-27,21:06:52 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:06:52 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-05-27,21:06:52 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:06:52 [INFO] (app.py:app:438): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:06:52 [DEBUG] (app.py:app:317): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:06:52 [INFO] (app.py:app:336): Password file is not specified: Authentication is not enabled
2020-05-27,21:06:52 [INFO] (app.py:app:350): Call context logging is disabled
2020-05-27,21:06:52 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:06:52 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:06:52 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:06:52 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:06:52 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:06:52 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:06:52 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:06:52 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:06:52 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:06:52 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:06:52 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:06:52 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:06:52 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:06:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:06:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:06:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:06:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:06:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:06:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:06:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:06:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:55 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:06:55 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 3.26ms
2020-05-27,21:06:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:06:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:06:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:06:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:57 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:06:57 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.65ms
2020-05-27,21:06:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:06:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:06:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:06:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:06:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:06:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:06:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:06:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:06:58 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:06:58 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.60ms
2020-05-27,21:07:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:07:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:07:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:07:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:07:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:07:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:07:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:07:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:07:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:07:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:07:01 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:07:01 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.64ms
2020-05-27,21:11:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:11:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:11:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:11:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:11:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:11:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:11:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:11:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:11 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:11:11 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.82ms
2020-05-27,21:11:20 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:11:20 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:11:20 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:11:22 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:11:22 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:11:22 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:11:22 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:11:22 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:11:22 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:11:22 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:11:22 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:11:22 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:11:22 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:11:22 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:11:22 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:11:22 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:11:22 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:11:22 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:11:22 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:11:22 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:11:22 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:11:22 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:11:22 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:11:22 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:11:26 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:11:26 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:11:26 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:11:26 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:11:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:11:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:11:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:11:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:26 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:11:26 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 2.34ms
2020-05-27,21:11:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:11:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:11:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:11:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:11:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:11:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:11:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:11:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:49 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:11:49 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.25ms
2020-05-27,21:11:53 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:11:53 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:11:53 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:11:54 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:11:54 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:11:54 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:11:54 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:11:54 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:11:54 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:11:54 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:11:54 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:11:54 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:11:54 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:11:54 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:11:54 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:11:54 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:11:54 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:11:54 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:11:54 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:11:54 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:11:54 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:11:54 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:11:54 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:11:54 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:11:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:11:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:11:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:11:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:11:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:11:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:11:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:11:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:11:57 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:11:57 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 3.01ms
2020-05-27,21:12:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:12:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:12:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:12:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:12:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:12:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:12:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:12:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:02 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:12:02 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.64ms
2020-05-27,21:12:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:12:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:12:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:12:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:12:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:12:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:12:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:12:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:14 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:12:14 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.66ms
2020-05-27,21:12:19 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:12:20 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:12:20 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:12:21 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:12:21 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:12:21 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:12:21 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:12:21 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:12:21 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:12:21 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:12:21 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:12:21 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:12:21 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:12:21 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:12:21 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:12:21 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:12:21 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:12:21 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:12:21 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:12:21 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:12:21 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:12:21 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:12:21 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:12:21 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:12:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:12:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:12:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:12:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:12:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:12:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:12:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:12:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:23 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:12:23 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 22.74ms
2020-05-27,21:12:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:12:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:12:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:12:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:12:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:12:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:12:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:12:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:25 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:12:25 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.81ms
2020-05-27,21:12:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:12:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:12:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:12:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:12:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:12:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:12:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:12:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:12:27 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:12:27 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 1.66ms
2020-05-27,21:17:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:17:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:17:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:17:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:17:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:17:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:17:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:17:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:17:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:17:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:17:53 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:17:53 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 2.75ms
2020-05-27,21:18:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:18:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:18:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:18:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:18:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:18:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:18:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:18:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:07 [DEBUG] (base_handler.py:base_handler:121): Found models: {}
2020-05-27,21:18:07 [INFO] (web.py:web:2250): 304 GET /proxy/lala (::1) 2.05ms
2020-05-27,21:18:11 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:18:11 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:18:11 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:18:14 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:18:14 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:18:14 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:18:14 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:18:14 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:18:14 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:18:14 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:18:14 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:18:14 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:18:14 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:18:14 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:18:14 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:18:14 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:18:14 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:18:14 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:18:14 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:18:14 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:18:14 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:18:14 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:18:14 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:18:14 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:18:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:18:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:18:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:18:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:18:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:18:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:18:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:18:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:16 [DEBUG] (base_handler.py:base_handler:121): Found models: /proxy/lala
2020-05-27,21:18:16 [INFO] (web.py:web:2250): 200 GET /proxy/lala (::1) 2.68ms
2020-05-27,21:18:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:18:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:18:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:18:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:18:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:18:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:18:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:18:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:18:27 [DEBUG] (base_handler.py:base_handler:121): Found models: /proxy/lala/caracuki
2020-05-27,21:18:27 [INFO] (web.py:web:2250): 200 GET /proxy/lala/caracuki (::1) 1.67ms
2020-05-27,21:21:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:21:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:21:45 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:21:45 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:21:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:21:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:21:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:21:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:21:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:21:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:21:45 [DEBUG] (base_handler.py:base_handler:121): Found models: /proxy/lala/www.nrk.no
2020-05-27,21:21:45 [INFO] (web.py:web:2250): 200 GET /proxy/lala/www.nrk.no (::1) 2.48ms
2020-05-27,21:55:11 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:55:11 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:55:11 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:55:12 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:55:12 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:55:12 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:55:12 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:55:12 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:55:12 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:55:12 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:55:12 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:55:12 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:55:12 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:55:12 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:55:12 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:55:12 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:55:12 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:55:12 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:55:12 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:55:12 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:55:12 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:55:12 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:55:12 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:55:12 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:55:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:55:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:55:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:55:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:55:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:55:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:55:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:55:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:55:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:55:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:55:18 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    a = urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:55:18 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 9.88ms
2020-05-27,21:55:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:55:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:55:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:55:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:55:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:55:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:55:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:55:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:55:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:55:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:55:20 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    a = urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:55:20 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.37ms
2020-05-27,21:55:58 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:55:58 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:55:58 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:56:00 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:56:00 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:56:00 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:56:00 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:56:00 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:56:00 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:56:00 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:56:00 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:56:00 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:56:00 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:56:00 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:56:00 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:56:00 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:56:00 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:56:00 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:56:00 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:56:00 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:56:00 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:56:00 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:56:00 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:56:00 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:56:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:02 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:02 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 10.03ms
2020-05-27,21:56:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:11 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:11 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.20ms
2020-05-27,21:56:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:15 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:15 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 1.94ms
2020-05-27,21:56:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:22 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:22 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.03ms
2020-05-27,21:56:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:22 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:22 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 4.81ms
2020-05-27,21:56:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:23 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.07ms
2020-05-27,21:56:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:23 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.07ms
2020-05-27,21:56:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:23 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen(the_url).read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:23 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.17ms
2020-05-27,21:56:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:41 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen("www.elpais.com").read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: '/proxy/lala/www.nrk.no'
2020-05-27,21:56:41 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.55ms
2020-05-27,21:56:44 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:56:44 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:56:44 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:56:50 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:56:50 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:56:50 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:56:50 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:56:50 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:56:50 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:56:50 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:56:50 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:56:50 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:56:50 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:56:50 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:56:50 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:56:50 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:56:50 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:56:50 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:56:50 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:56:50 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:56:50 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:56:50 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:56:50 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:56:50 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:56:52 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:52 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:52 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:52 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:52 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:52 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:52 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen("www.elpais.com").read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: 'www.elpais.com'
2020-05-27,21:56:52 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 10.78ms
2020-05-27,21:56:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:56:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:56:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:56:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:56:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:56:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:56:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:56:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:56:55 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 22, in get
    urllib.request.urlopen("www.elpais.com").read(1000)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 510, in open
    req = Request(fullurl, data)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 328, in __init__
    self.full_url = url
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 354, in full_url
    self._parse()
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 383, in _parse
    raise ValueError("unknown url type: %r" % self.full_url)
ValueError: unknown url type: 'www.elpais.com'
2020-05-27,21:56:55 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.09ms
2020-05-27,21:59:09 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:59:10 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:59:10 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:59:11 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:59:11 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:59:11 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:59:11 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:59:11 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:59:11 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:59:11 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:59:11 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:59:11 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:59:11 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:59:11 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:59:11 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:59:11 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:59:11 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:59:11 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:59:11 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:59:11 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:59:11 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:59:11 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:59:11 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:59:11 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:59:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:59:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:59:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:59:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:59:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:59:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:59:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:59:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:18 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 23, in get
    response = requests.get(the_url)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/api.py", line 76, in get
    return request('get', url, params=params, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/sessions.py", line 516, in request
    prep = self.prepare_request(req)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/sessions.py", line 459, in prepare_request
    hooks=merge_hooks(request.hooks, self.hooks),
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/models.py", line 314, in prepare
    self.prepare_url(url, params)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/models.py", line 388, in prepare_url
    raise MissingSchema(error)
requests.exceptions.MissingSchema: Invalid URL 'www.nrk.no': No schema supplied. Perhaps you meant http://www.nrk.no?
2020-05-27,21:59:18 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 11.36ms
2020-05-27,21:59:21 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:59:21 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:59:21 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:59:21 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:59:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:59:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:59:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:59:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:21 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 23, in get
    response = requests.get(the_url)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/api.py", line 76, in get
    return request('get', url, params=params, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/sessions.py", line 516, in request
    prep = self.prepare_request(req)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/sessions.py", line 459, in prepare_request
    hooks=merge_hooks(request.hooks, self.hooks),
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/models.py", line 314, in prepare
    self.prepare_url(url, params)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/models.py", line 388, in prepare_url
    raise MissingSchema(error)
requests.exceptions.MissingSchema: Invalid URL 'www.nrk.no': No schema supplied. Perhaps you meant http://www.nrk.no?
2020-05-27,21:59:21 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.43ms
2020-05-27,21:59:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:59:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:59:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:59:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:59:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:59:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:59:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:59:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:38 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/lala/www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/lala/www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 23, in get
    response = requests.get(the_url)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/api.py", line 76, in get
    return request('get', url, params=params, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/sessions.py", line 516, in request
    prep = self.prepare_request(req)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/sessions.py", line 459, in prepare_request
    hooks=merge_hooks(request.hooks, self.hooks),
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/models.py", line 314, in prepare
    self.prepare_url(url, params)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/models.py", line 388, in prepare_url
    raise MissingSchema(error)
requests.exceptions.MissingSchema: Invalid URL 'www.nrk.no': No schema supplied. Perhaps you meant http://www.nrk.no?
2020-05-27,21:59:38 [ERROR] (web.py:web:2250): 500 GET /proxy/lala/www.nrk.no (::1) 2.50ms
2020-05-27,21:59:52 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,21:59:52 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:59:52 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,21:59:54 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,21:59:54 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,21:59:54 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,21:59:54 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,21:59:54 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,21:59:54 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,21:59:54 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,21:59:54 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,21:59:54 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,21:59:54 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,21:59:54 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,21:59:54 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:59:54 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:59:54 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:59:54 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,21:59:54 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,21:59:54 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,21:59:54 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,21:59:54 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,21:59:54 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,21:59:54 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,21:59:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,21:59:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,21:59:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,21:59:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,21:59:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,21:59:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,21:59:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,21:59:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,21:59:56 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,21:59:56 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,21:59:56 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,21:59:57 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 77380
2020-05-27,21:59:57 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://www.nrk.no
2020-05-27,21:59:57 [INFO] (web.py:web:2250): 200 GET /proxy/lala/www.nrk.no (::1) 593.90ms
2020-05-27,22:01:43 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,22:01:43 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:01:43 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,22:01:53 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,22:01:53 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,22:01:53 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,22:01:53 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,22:01:53 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,22:01:53 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,22:01:53 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,22:01:53 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,22:01:53 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,22:01:53 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,22:01:53 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,22:01:53 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:01:53 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:01:53 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:01:53 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,22:01:53 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,22:01:53 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,22:01:53 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:01:53 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:01:53 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:01:53 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,22:02:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:02:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:02:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:02:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:02:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:02:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:02:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:02:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:02:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:02:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:02:02 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:02:02 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:02:02 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:02:02 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 None
2020-05-27,22:02:03 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://www.nrk.no
2020-05-27,22:02:03 [INFO] (web.py:web:2250): 304 GET /proxy/lala/www.nrk.no (::1) 722.54ms
2020-05-27,22:02:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:02:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:02:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:02:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:02:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:02:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:02:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:02:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:02:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:02:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:02:20 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:02:20 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:02:20 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:02:20 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 None
2020-05-27,22:02:20 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://www.nrk.no
2020-05-27,22:02:20 [INFO] (web.py:web:2250): 200 GET /proxy/www.nrk.no (::1) 818.45ms
2020-05-27,22:09:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:09:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:09:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:09:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:09:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:09:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:09:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:09:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:20 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:09:20 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:09:20 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:09:20 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 77485
2020-05-27,22:09:20 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://www.nrk.no
2020-05-27,22:09:20 [INFO] (web.py:web:2250): 304 GET /proxy/www.nrk.no (::1) 574.77ms
2020-05-27,22:09:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:09:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:09:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:09:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:09:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:09:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:09:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:09:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:24 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:09:24 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:09:24 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:09:24 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 None
2020-05-27,22:09:24 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://www.nrk.no
2020-05-27,22:09:24 [INFO] (web.py:web:2250): 200 GET /proxy/http://www.nrk.no (::1) 562.74ms
2020-05-27,22:09:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:09:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:09:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:09:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:09:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:09:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:09:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:09:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:09:38 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:09:38 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:09:38 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:09:39 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 None
2020-05-27,22:09:39 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://www.nrk.no
2020-05-27,22:09:39 [INFO] (web.py:web:2250): 304 GET /proxy/http://www.nrk.no (::1) 734.23ms
2020-05-27,22:10:02 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,22:10:02 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:10:02 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,22:10:03 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,22:10:03 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,22:10:03 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,22:10:03 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,22:10:03 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,22:10:03 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,22:10:03 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,22:10:03 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,22:10:03 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,22:10:03 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,22:10:03 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,22:10:03 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:10:03 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:10:03 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:10:03 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,22:10:03 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,22:10:03 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,22:10:03 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:10:03 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:10:03 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:10:03 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,22:10:05 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:10:05 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:10:05 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:10:05 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:10:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:10:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:10:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:10:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:10:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:10:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:10:05 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:10:05 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:10:05 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:10:05 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 None
2020-05-27,22:10:05 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://www.nrk.no
2020-05-27,22:10:06 [INFO] (web.py:web:2250): 304 GET /proxy/http://www.nrk.no (::1) 544.43ms
2020-05-27,22:23:32 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:23:32 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:23:32 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:23:32 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:23:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:23:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:23:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:23:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:23:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:23:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:23:32 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:23:32 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:23:32 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:23:32 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 None
2020-05-27,22:23:32 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://www.nrk.no
2020-05-27,22:23:32 [INFO] (web.py:web:2250): 304 GET /proxy/http://www.nrk.no (::1) 518.63ms
2020-05-27,22:23:36 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,22:23:37 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:23:37 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,22:23:38 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,22:23:38 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,22:23:38 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,22:23:38 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,22:23:38 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,22:23:38 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,22:23:38 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,22:23:38 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,22:23:38 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,22:23:38 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,22:23:38 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,22:23:38 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:23:38 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:23:38 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:23:38 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,22:23:38 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,22:23:38 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,22:23:38 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:23:38 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:23:38 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:23:38 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,22:23:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:23:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:23:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:23:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:23:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:23:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:23:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:23:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:23:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:23:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:23:41 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:23:41 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:23:41 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:23:41 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 78124
2020-05-27,22:23:41 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/http://www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/http://www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 25, in get
    response = json.loads(response.text)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 2 column 5 (char 5)
2020-05-27,22:23:41 [ERROR] (web.py:web:2250): 500 GET /proxy/http://www.nrk.no (::1) 528.31ms
2020-05-27,22:24:13 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,22:24:13 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:24:13 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,22:24:14 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,22:24:14 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,22:24:14 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,22:24:14 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,22:24:14 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,22:24:14 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,22:24:14 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,22:24:14 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,22:24:14 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,22:24:14 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,22:24:14 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,22:24:14 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:24:14 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:24:14 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:24:14 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,22:24:14 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,22:24:14 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,22:24:14 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:24:14 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:24:14 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:24:14 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,22:24:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:24:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:24:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:24:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:24:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:24:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:24:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:24:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:24:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:24:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:24:16 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:24:18 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:24:18 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:24:18 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 None
2020-05-27,22:24:18 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/http://www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/http://www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 25, in get
    response = json.loads(response.text)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 2 column 5 (char 5)
2020-05-27,22:24:18 [ERROR] (web.py:web:2250): 500 GET /proxy/http://www.nrk.no (::1) 2025.89ms
2020-05-27,22:24:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:24:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:24:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:24:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:24:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:24:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:24:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:24:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:24:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:24:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:24:20 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): www.nrk.no:80
2020-05-27,22:24:20 [DEBUG] (connectionpool.py:connectionpool:442): http://www.nrk.no:80 "GET / HTTP/1.1" 301 0
2020-05-27,22:24:20 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): www.nrk.no:443
2020-05-27,22:24:20 [DEBUG] (connectionpool.py:connectionpool:442): https://www.nrk.no:443 "GET / HTTP/1.1" 200 None
2020-05-27,22:24:20 [ERROR] (web.py:web:1792): Uncaught exception GET /proxy/http://www.nrk.no (::1)
HTTPServerRequest(protocol='http', host='localhost:9004', method='GET', uri='/proxy/http://www.nrk.no', version='HTTP/1.1', remote_ip='::1')
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/web.py", line 1701, in _execute
    result = method(*self.path_args, **self.path_kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/handlers/proxy_handler.py", line 25, in get
    response = json.loads(response.text)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 2 column 5 (char 5)
2020-05-27,22:24:20 [ERROR] (web.py:web:2250): 500 GET /proxy/http://www.nrk.no (::1) 464.39ms
2020-05-27,22:26:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:26:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:26:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:26:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:26:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:26:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:26:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:26:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:26:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:26:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:26:35 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-27,22:26:35 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list/ HTTP/1.1" 400 53
2020-05-27,22:26:35 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list/
2020-05-27,22:26:35 [INFO] (web.py:web:2250): 200 GET /proxy/https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list/ (::1) 657.50ms
2020-05-27,22:35:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:35:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:35:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:35:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:35:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:35:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:35:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:35:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:35:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:35:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:35:02 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): localhost:3000
2020-05-27,22:35:02 [DEBUG] (connectionpool.py:connectionpool:442): http://localhost:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-27,22:35:03 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://localhost:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false
2020-05-27,22:35:03 [INFO] (web.py:web:2250): 200 GET /proxy/http://localhost:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false (::1) 1320.39ms
2020-05-27,22:35:30 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-27,22:35:30 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:35:30 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-27,22:35:31 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-27,22:35:31 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-27,22:35:31 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-27,22:35:31 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-27,22:35:31 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-27,22:35:31 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-27,22:35:31 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-27,22:35:31 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-27,22:35:31 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-27,22:35:31 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-27,22:35:31 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-27,22:35:31 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:35:31 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:35:31 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:35:31 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-27,22:35:31 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-27,22:35:31 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-27,22:35:31 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-27,22:35:31 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-27,22:35:31 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-27,22:35:31 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-27,22:35:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-27,22:35:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-27,22:35:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-27,22:35:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-27,22:35:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-27,22:35:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:35:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-27,22:35:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:35:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-27,22:35:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-27,22:35:34 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): localhost:3000
2020-05-27,22:35:35 [DEBUG] (connectionpool.py:connectionpool:442): http://localhost:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-27,22:35:36 [DEBUG] (base_handler.py:base_handler:121): This is the url to proxy: http://localhost:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false
2020-05-27,22:35:36 [INFO] (web.py:web:2250): 200 GET /proxy/http://localhost:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false (::1) 1617.03ms
2020-05-28,12:27:48 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 14.83ms
2020-05-28,12:27:48 [INFO] (web.py:web:2250): 304 GET /js/article-tableau-integration.js (::1) 18.24ms
2020-05-28,12:27:49 [WARNING] (web.py:web:2250): 404 GET /assets/js/csvtosjon.js (::1) 0.53ms
2020-05-28,13:02:29 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-28,13:02:29 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,13:02:29 [INFO] (app.py:app:124): Shutting down TabPy...
