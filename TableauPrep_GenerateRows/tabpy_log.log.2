2020-05-11,20:32:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     # iter = response.iter_lines()
     # a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:32:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 36.07ms
2020-05-11,20:32:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:32:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:32:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:32:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:32:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:32:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:32:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:32:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    # iter = response.iter_lines()\n    # a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:32:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     # iter = response.iter_lines()
     # a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:32:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.48ms
2020-05-11,20:32:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:32:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:32:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:32:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:32:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:32:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:32:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:32:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    # iter = response.iter_lines()\n    # a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,20:32:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     # iter = response.iter_lines()
     # a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,20:32:47 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,20:32:49 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,20:32:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 1748.49ms
2020-05-11,20:32:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:32:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:32:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:32:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:32:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:32:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:32:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:32:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    # iter = response.iter_lines()\n    # a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:32:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     # iter = response.iter_lines()
     # a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:32:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.63ms
2020-05-11,20:32:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:32:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:32:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:32:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:32:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:32:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:32:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:32:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:32:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    # iter = response.iter_lines()\n    # a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:32:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     # iter = response.iter_lines()
     # a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:32:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.78ms
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    iter = response.iter_lines()\n    a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     iter = response.iter_lines()
     a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.99ms
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    iter = response.iter_lines()\n    a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     iter = response.iter_lines()
     a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.25ms
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    iter = response.iter_lines()\n    a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,20:33:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     iter = response.iter_lines()
     a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,20:33:17 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,20:33:18 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,20:33:18 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 719.89ms
2020-05-11,20:33:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    iter = response.iter_lines()\n    a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     iter = response.iter_lines()
     a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:19 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 36.81ms
2020-05-11,20:33:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    iter = response.iter_lines()\n    a = next(iter)\n    data = list()\n\n    for i in iter:\n        a = i.decode(\'utf-8\').split(\';\')\n        print(a)\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    print(df)\n    return df\n    #return pd.DataFrame(first_row_csv)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        count = 0\n        for i in keys_csv:\n            # if first_row_csv[count].isnumeric():\n            #     dict[i] = prep_int()\n            # else:\n            dict[i] = prep_string()\n            count = count + 1\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     iter = response.iter_lines()
     a = next(iter)
     data = list()
 
     for i in iter:
         a = i.decode('utf-8').split(';')
         print(a)
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     print(df)
     return df
     #return pd.DataFrame(first_row_csv)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         count = 0
         for i in keys_csv:
             # if first_row_csv[count].isnumeric():
             #     dict[i] = prep_int()
             # else:
             dict[i] = prep_string()
             count = count + 1
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:19 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.69ms
2020-05-11,20:33:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:36 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.16ms
2020-05-11,20:33:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 14.14ms
2020-05-11,20:33:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:39 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.10ms
2020-05-11,20:33:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:39 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.16ms
2020-05-11,20:33:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.96ms
2020-05-11,20:33:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:33:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:33:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:33:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:33:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:33:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:33:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:33:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.25ms
2020-05-11,20:34:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:34:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:34:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:34:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:34:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:34:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:34:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:34:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:34:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:34:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.43ms
2020-05-11,20:34:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:34:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:34:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:34:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:34:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:34:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:34:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:34:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:34:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:34:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.82ms
2020-05-11,20:34:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:34:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:34:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:34:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:34:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:34:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:34:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:34:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:34:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:34:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 18.82ms
2020-05-11,20:34:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:34:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:34:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:34:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:34:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:34:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:34:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:34:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:34:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:34:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.10ms
2020-05-11,20:34:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:34:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:34:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:34:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:34:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:34:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:34:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:34:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:34:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:34:56 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.39ms
2020-05-11,20:34:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:34:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:34:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:34:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:34:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:34:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:34:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:34:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:34:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:34:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:34:56 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.89ms
2020-05-11,20:35:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:35:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:35:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:35:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:35:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:35:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:35:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:35:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:35:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:35:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 20.64ms
2020-05-11,20:35:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:35:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:35:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:35:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:35:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:35:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:35:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:35:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:35:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:35:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 45.66ms
2020-05-11,20:35:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:35:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:35:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:35:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:35:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:35:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:35:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:35:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:35:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:35:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.47ms
2020-05-11,20:35:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:35:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:35:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:35:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:35:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:35:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:35:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:35:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:35:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:35:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.69ms
2020-05-11,20:35:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:35:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:35:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:35:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:35:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:35:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:35:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:35:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:35:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:35:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.18ms
2020-05-11,20:35:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:35:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:35:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:35:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:35:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:35:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:35:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:35:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:35:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:35:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:35:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.11ms
2020-05-11,20:36:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:36:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:36:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.07ms
2020-05-11,20:36:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:36:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:36:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.10ms
2020-05-11,20:36:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:36:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:36:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.19ms
2020-05-11,20:36:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:36:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:36:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.12ms
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:36:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:36:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.87ms
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:36:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:36:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.83ms
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,20:36:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,20:36:42 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,20:36:44 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,20:36:45 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 2713.50ms
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:36:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:36:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.20ms
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,20:36:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,20:36:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.73ms
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,20:36:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,20:36:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,20:36:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,20:36:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,20:36:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,20:36:55 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,20:36:55 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,20:36:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 565.28ms
2020-05-12,09:35:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-12,09:35:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-12,09:35:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-12,09:35:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-12,09:35:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-12,09:35:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-12,09:35:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-12,09:35:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-12,09:35:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-12,09:35:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-12,09:35:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-12,09:35:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-12,09:35:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 115.07ms
2020-05-12,09:35:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-12,09:35:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-12,09:35:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-12,09:35:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-12,09:35:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-12,09:35:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-12,09:35:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-12,09:35:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-12,09:35:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-12,09:35:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-12,09:35:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-12,09:35:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-12,09:35:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 41.13ms
2020-05-12,16:51:29 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-12,16:51:29 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-12,16:51:29 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-28,17:40:53 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-28,17:40:53 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-28,17:40:53 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-28,17:40:53 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-28,17:40:53 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-28,17:40:53 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-28,17:40:53 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-28,17:40:53 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-28,17:40:53 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-28,17:40:53 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-28,17:40:53 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-28,17:40:53 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:40:53 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:40:53 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:40:53 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-28,17:40:53 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-28,17:40:53 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-28,17:40:53 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:40:53 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:40:53 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:40:53 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-28,17:40:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:40:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:40:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:40:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:40:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:40:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:40:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:40:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:40:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:40:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 526.95ms
2020-05-28,17:40:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:40:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:40:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:40:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:40:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:40:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:40:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:40:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:40:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:40:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 50.33ms
2020-05-28,17:40:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:40:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:40:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:40:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:40:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:40:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:40:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:40:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:40:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:40:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:40:57 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:41:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:41:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:41:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:41:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:41:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:41:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:41:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:41:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:41:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:41:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:41:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:41:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:41:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 48.52ms
2020-05-28,17:41:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:41:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:41:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:41:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:41:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:41:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:41:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:41:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:41:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:41:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:41:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:41:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:41:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 43.40ms
2020-05-28,17:41:05 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:41:05 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:41:05 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8541.80ms
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:43:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:43:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    print(keys_json)\n    \n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:43:18 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     print(keys_json)
     
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:43:18 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 41.79ms
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:43:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:43:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    print(keys_json)\n    \n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:43:18 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     print(keys_json)
     
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:43:18 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 45.10ms
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:43:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:43:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:43:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:18 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    print(keys_json)\n    \n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:43:18 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     print(keys_json)
     
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:43:18 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:43:18 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:43:18 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:43:18 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 207.99ms
2020-05-28,17:43:26 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-28,17:43:26 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:43:26 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-28,17:43:29 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-28,17:43:29 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-28,17:43:29 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-28,17:43:29 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-28,17:43:29 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-28,17:43:29 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-28,17:43:29 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-28,17:43:29 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-28,17:43:29 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-28,17:43:29 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-28,17:43:29 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-28,17:43:29 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:43:29 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:43:29 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:43:29 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-28,17:43:29 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-28,17:43:29 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-28,17:43:29 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:43:29 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:43:29 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:43:29 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-28,17:43:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:43:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:43:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:43:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:43:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:43:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:43:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:43:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:43:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:43:33 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 583.80ms
2020-05-28,17:43:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:43:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:43:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:43:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:43:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:43:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:43:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:43:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:43:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:43:33 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 43.31ms
2020-05-28,17:43:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:43:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:43:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:43:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:43:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:43:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:43:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:43:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:43:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:43:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:43:34 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:43:34 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:43:34 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:43:34 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 259.80ms
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:44:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:44:15 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.48ms
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:44:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:44:15 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 54.56ms
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:44:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:44:15 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:44:15 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:44:15 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:44:15 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 191.01ms
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:44:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:44:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 47.89ms
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:44:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:44:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 56.28ms
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:44:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:44:20 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:44:20 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:44:20 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:44:20 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 194.61ms
2020-05-28,17:44:25 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-28,17:44:26 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:44:26 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-28,17:44:39 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-28,17:44:39 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-28,17:44:39 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-28,17:44:39 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-28,17:44:39 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-28,17:44:39 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-28,17:44:39 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-28,17:44:39 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-28,17:44:39 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-28,17:44:39 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-28,17:44:39 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-28,17:44:39 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:44:39 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:44:39 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:44:39 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-28,17:44:39 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-28,17:44:39 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-28,17:44:39 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:44:39 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:44:39 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:44:39 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-28,17:44:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:44:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:44:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 453.74ms
2020-05-28,17:44:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:44:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:44:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.14ms
2020-05-28,17:44:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:44:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:44:43 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:44:43 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:44:43 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:44:43 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 203.11ms
2020-05-28,17:44:51 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-28,17:44:51 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:44:51 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-28,17:44:54 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-28,17:44:54 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-28,17:44:54 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-28,17:44:54 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-28,17:44:54 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-28,17:44:54 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-28,17:44:54 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-28,17:44:54 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-28,17:44:54 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-28,17:44:54 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-28,17:44:54 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-28,17:44:54 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:44:54 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:44:54 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:44:54 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-28,17:44:54 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-28,17:44:54 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-28,17:44:54 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:44:54 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:44:54 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:44:54 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-28,17:44:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:44:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:44:58 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 525.66ms
2020-05-28,17:44:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:44:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:44:58 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 41.98ms
2020-05-28,17:44:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:44:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:44:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:44:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:44:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:44:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:44:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:44:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:44:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:44:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:44:58 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:44:58 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:44:58 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:44:58 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 258.19ms
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:46:05 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:46:05 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:46:05 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:46:05 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 41.43ms
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:46:05 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:46:05 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:46:05 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:46:05 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.21ms
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:46:05 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:46:05 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:46:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:05 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:46:05 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:46:05 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:46:06 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:46:06 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:46:06 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 191.39ms
2020-05-28,17:46:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:46:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:46:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:46:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:46:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:46:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:46:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:46:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:46:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:46:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 44.49ms
2020-05-28,17:46:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:46:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:46:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:46:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:46:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:46:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:46:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:46:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:46:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:46:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 33.42ms
2020-05-28,17:46:21 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:46:21 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:46:21 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:46:21 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:46:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:46:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:46:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:46:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:46:21 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:46:21 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:46:21 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:46:21 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:46:21 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:46:21 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 464.46ms
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:47:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:47:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 50.15ms
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:47:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:47:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 54.67ms
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:47:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:47:02 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:47:02 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:47:02 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:47:02 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 351.10ms
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:47:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:47:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 42.42ms
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:47:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:47:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 36.65ms
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:47:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:47:37 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:47:38 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:47:38 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:47:38 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 387.21ms
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:47:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:47:58 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 46.32ms
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:47:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:47:58 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 42.30ms
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:47:58 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:47:58 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:47:58 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:47:58 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response)\n\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:47:58 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response)
 
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:47:58 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:47:58 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:47:58 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:47:58 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 331.90ms
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:48:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:48:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:48:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:48:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 43.55ms
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:48:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:48:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:48:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:48:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 42.34ms
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:48:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:48:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:48:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:48:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:48:37 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:48:37 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:48:37 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-28,17:48:37 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 200.81ms
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:48:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:48:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:48:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:48:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 44.83ms
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:48:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:48:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:48:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:48:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 37.49ms
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:48:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:48:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:48:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:48:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:48:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:48:57 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:48:57 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:48:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 224.67ms
2020-05-28,17:49:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:49:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:49:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 38.44ms
2020-05-28,17:49:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:49:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:49:15 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.97ms
2020-05-28,17:49:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:49:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:49:15 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:49:15 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:49:15 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 229.24ms
2020-05-28,17:49:41 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-28,17:49:41 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:49:41 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-28,17:49:43 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-28,17:49:43 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-28,17:49:43 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-28,17:49:43 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-28,17:49:43 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-28,17:49:43 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-28,17:49:43 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-28,17:49:43 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-28,17:49:43 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-28,17:49:43 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-28,17:49:43 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-28,17:49:43 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:49:43 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:49:43 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:49:43 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-28,17:49:43 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-28,17:49:43 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-28,17:49:43 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:49:43 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:49:43 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:49:43 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:48 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:48 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:49:48 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:49:48 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 503.71ms
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:48 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:48 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:49:48 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:49:48 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 34.96ms
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:48 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:48 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:48 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:49:48 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:49:48 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:49:49 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:49:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 297.41ms
2020-05-28,17:49:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:49:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:49:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.53ms
2020-05-28,17:49:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:49:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:49:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.60ms
2020-05-28,17:49:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:49:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:49:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:49:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:49:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:49:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:49:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:49:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:49:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:49:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:49:56 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:49:56 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:49:56 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 188.06ms
2020-05-28,17:50:21 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:50:21 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:50:21 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:50:21 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:50:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:50:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:50:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:50:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:21 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:50:21 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:50:21 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 36.17ms
2020-05-28,17:50:21 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:50:21 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:50:21 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:50:21 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:50:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:50:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:50:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:50:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:21 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:50:21 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:50:21 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 56.27ms
2020-05-28,17:50:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:50:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:50:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:50:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:50:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:50:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:50:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:50:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:50:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:50:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:50:22 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:50:22 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:50:22 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 220.70ms
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:05 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:05 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:05 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:05 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 36.90ms
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:05 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:05 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:05 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:05 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 42.28ms
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:05 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:05 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:05 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:05 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:51:05 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:51:05 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:51:05 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:51:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 367.96ms
2020-05-28,17:51:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.00ms
2020-05-28,17:51:20 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:20 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:20 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:20 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:20 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:20 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:20 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:20 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.04ms
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:23 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:23 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.21ms
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:23 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:23 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 41.10ms
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:23 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:23 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:23 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:23 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:51:23 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:51:23 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:51:24 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:51:24 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 354.26ms
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 37.20ms
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 43.15ms
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:51:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:51:28 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:51:28 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:51:29 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 347.80ms
2020-05-28,17:51:32 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:32 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:32 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:32 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:32 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:32 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:32 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 37.73ms
2020-05-28,17:51:32 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:32 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:32 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:32 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:32 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:51:32 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:51:32 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 45.67ms
2020-05-28,17:51:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:51:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:51:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:51:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:51:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:51:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:51:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:51:33 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:51:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    print(globals())\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    print("******** Danielo ************")\n    print(keys_json)\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            print("///////"+i)\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:51:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
     print(globals())
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     print("******** Danielo ************")
     print(keys_json)
 
     if keys_json == 'Init':
         for i in keys_json:
             print("///////"+i)
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:51:33 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:51:33 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:51:33 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 376.04ms
2020-05-28,17:53:03 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-28,17:53:03 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:53:03 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-28,17:53:05 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-28,17:53:05 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-28,17:53:05 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-28,17:53:05 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-28,17:53:05 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-28,17:53:05 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-28,17:53:05 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-28,17:53:05 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-28,17:53:05 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-28,17:53:05 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-28,17:53:05 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-28,17:53:05 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:53:05 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:53:05 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:53:05 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-28,17:53:05 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-28,17:53:05 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-28,17:53:05 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,17:53:05 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,17:53:05 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,17:53:05 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-28,17:53:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:53:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:53:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:53:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:53:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:53:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:53:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:53:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:53:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:53:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 650.51ms
2020-05-28,17:53:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:53:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:53:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:53:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:53:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:53:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:53:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:53:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:53:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:53:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.99ms
2020-05-28,17:53:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:53:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:53:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:53:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:53:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:53:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:53:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:53:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:53:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:53:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.81ms
2020-05-28,17:53:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:53:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:53:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:53:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:53:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:53:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:53:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:53:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:53:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:53:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.86ms
2020-05-28,17:53:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:53:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:53:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:53:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:53:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:53:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:53:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:53:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:53:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:53:14 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:53:14 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:53:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 414.08ms
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:53:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:53:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:53:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:53:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.90ms
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:53:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:53:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:53:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:53:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.51ms
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:53:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:53:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:53:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:53:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(data)\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:53:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(data)
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:53:16 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:53:17 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:53:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 346.82ms
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:54:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:54:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:54:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:54:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.27ms
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:54:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:54:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:54:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:54:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.54ms
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:54:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:54:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:54:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:54:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:54:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:54:43 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:54:43 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:54:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 304.59ms
2020-05-28,17:55:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:55:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:55:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:55:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:55:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:55:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:55:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:55:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print_r(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:55:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print_r(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:55:28 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'print_r' is not defined"
2020-05-28,17:55:28 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.35ms
2020-05-28,17:55:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:55:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:55:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:55:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:55:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:55:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:55:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:55:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print_r(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:55:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print_r(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:55:28 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'print_r' is not defined"
2020-05-28,17:55:28 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 18.57ms
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:55:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:55:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:55:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:55:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.64ms
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:55:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:55:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:55:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:55:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.21ms
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:55:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:55:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:55:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:55:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response:\n        print(item)\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:55:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response:
         print(item)
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:55:37 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:55:37 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:55:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 256.12ms
2020-05-28,17:56:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:56:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:56:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.97ms
2020-05-28,17:56:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:56:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:56:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.92ms
2020-05-28,17:56:04 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:04 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:04 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:04 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:04 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:56:04 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:56:04 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:56:04 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:56:04 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 234.19ms
2020-05-28,17:56:12 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:12 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:12 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:12 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:12 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:56:12 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:56:12 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.77ms
2020-05-28,17:56:12 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:12 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:12 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:12 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:12 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:56:12 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:56:12 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.99ms
2020-05-28,17:56:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(first_row_json)\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:56:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(first_row_json)
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:56:13 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:56:13 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:56:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 206.39ms
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:56:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:56:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 20.23ms
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:56:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:56:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.89ms
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:56:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:56:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:56:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:56:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:56:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:56:41 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:56:41 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:56:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 179.70ms
2020-05-28,17:57:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(dict)\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:57:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(dict)
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:57:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.87ms
2020-05-28,17:57:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(dict)\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:57:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(dict)
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:57:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.26ms
2020-05-28,17:57:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(dict)\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:57:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(dict)
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:57:14 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:57:14 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:57:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 239.08ms
2020-05-28,17:57:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(dict)\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:57:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(dict)
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:57:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.11ms
2020-05-28,17:57:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(dict)\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:57:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(dict)
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:57:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.40ms
2020-05-28,17:57:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(dict)\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:57:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(dict)
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:57:17 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:57:17 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:57:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 196.38ms
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:57:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:57:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.23ms
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'7eeb365a-48e5-4066-89fb-345b9e5dbe18\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,17:57:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '7eeb365a-48e5-4066-89fb-345b9e5dbe18'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_ededf925a94f4c59824e9f0e77f09d6b(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,17:57:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 37.03ms
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,17:57:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,17:57:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,17:57:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,17:57:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,17:57:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,17:57:44 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,17:57:44 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,17:57:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 221.81ms
2020-05-28,18:06:59 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-28,18:06:59 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,18:06:59 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-28,18:07:01 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-28,18:07:01 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-28,18:07:01 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-28,18:07:01 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-28,18:07:01 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-28,18:07:01 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-28,18:07:01 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-28,18:07:01 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-28,18:07:01 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-28,18:07:01 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-28,18:07:01 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-28,18:07:01 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,18:07:01 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,18:07:01 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,18:07:01 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-28,18:07:01 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-28,18:07:01 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-28,18:07:01 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,18:07:01 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,18:07:01 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,18:07:01 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-28,18:07:59 [CRITICAL] (app.py:app:118): Exiting on signal 2...
2020-05-28,18:08:00 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,18:08:00 [INFO] (app.py:app:124): Shutting down TabPy...
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter port set to "9004" from default value
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter server_version set to "1.0.0" from default value
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter evaluate_timeout set to "30" from default value
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter transfer_protocol set to "http" from default value
2020-05-28,18:08:02 [DEBUG] (app.py:app:217): Parameter certificate_file is not set
2020-05-28,18:08:02 [DEBUG] (app.py:app:217): Parameter key_file is not set
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-28,18:08:02 [DEBUG] (app.py:app:217): Parameter TABPY_PWD_FILE is not set
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter log_request_context set to "false" from default value
2020-05-28,18:08:02 [DEBUG] (app.py:app:211): Parameter max_request_size_in_mb set to "100" from default value
2020-05-28,18:08:02 [INFO] (app.py:app:441): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-28,18:08:02 [DEBUG] (app.py:app:320): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-28,18:08:02 [INFO] (app.py:app:339): Password file is not specified: Authentication is not enabled
2020-05-28,18:08:02 [INFO] (app.py:app:353): Call context logging is disabled
2020-05-28,18:08:02 [INFO] (app.py:app:126): Initializing TabPy...
2020-05-28,18:08:02 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-28,18:08:02 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-28,18:08:02 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,18:08:02 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,18:08:02 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,18:08:02 [INFO] (app.py:app:130): Done initializing TabPy.
2020-05-28,18:08:02 [INFO] (app.py:app:84): Setting max request size to 104857600 bytes
2020-05-28,18:08:02 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-28,18:08:02 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-28,18:08:02 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-28,18:08:02 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-28,18:08:02 [INFO] (app.py:app:108): Web service listening on port 9004
2020-05-28,18:08:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:08:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
