2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print("SISI")
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:56:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.76ms
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print("SISI")\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print("SISI")
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print("SISI")\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print("SISI")
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:56:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print("SISI")\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print("SISI")
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:56:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 40.74ms
2020-05-11,14:56:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.21ms
2020-05-11,14:56:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.44ms
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print("SISI")\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print("SISI")
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:56:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print("SISI")\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print("SISI")
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:56:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 19.42ms
2020-05-11,14:56:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 19.09ms
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:56:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:56:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:56:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        print("SISI")\n        print(keys_json)\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:56:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         print("SISI")
         print(keys_json)
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:56:37 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,14:56:38 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,14:56:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 404.51ms
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.29ms
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.48ms
2020-05-11,14:57:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 34.99ms
2020-05-11,14:57:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 34.77ms
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.80ms
2020-05-11,14:57:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.56ms
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,14:57:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,14:57:02 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,14:57:02 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,14:57:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 400.58ms
2020-05-11,14:57:04 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:04 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:04 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:04 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:04 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:04 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:04 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.44ms
2020-05-11,14:57:04 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:04 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:04 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:04 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:04 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:04 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:04 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.48ms
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:07 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 27.71ms
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:07 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 71.52ms
2020-05-11,14:57:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:07 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 62.65ms
2020-05-11,14:57:08 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:08 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:08 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:08 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 63.07ms
2020-05-11,14:57:08 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:08 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:08 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:08 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:08 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:08 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:08 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:08 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:08 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:08 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 43.66ms
2020-05-11,14:57:08 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 58.59ms
2020-05-11,14:57:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:10 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.41ms
2020-05-11,14:57:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,14:57:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,14:57:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,14:57:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,14:57:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,14:57:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,14:57:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,14:57:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,14:57:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(url)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,14:57:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(url)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,14:57:10 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.90ms
2020-05-11,15:02:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:02:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:02:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:02:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:02:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:02:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:02:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:02:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame()\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:02:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame()
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:02:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.07ms
2020-05-11,15:02:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:02:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:02:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:02:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:02:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:02:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:02:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:02:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame()\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:02:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame()
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:02:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.60ms
2020-05-11,15:02:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:02:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:02:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:02:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:02:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:02:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:02:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:02:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame()\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:02:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame()
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:02:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.57ms
2020-05-11,15:02:37 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:02:37 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:02:37 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:02:37 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:02:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:02:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:02:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:37 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:02:37 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:02:37 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame()\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:02:37 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame()
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:02:37 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.55ms
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:03:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(data)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(data)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:03:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 37.07ms
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:03:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(data)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(data)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:03:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(data)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(data)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:03:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 54.86ms
2020-05-11,15:03:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(data)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(data)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:03:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 53.39ms
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:03:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 48.97ms
2020-05-11,15:03:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(data)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(data)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:03:51 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:03:51 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:51 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(data)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:03:51 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(data)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:03:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.99ms
2020-05-11,15:03:51 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 42.67ms
2020-05-11,15:03:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:03:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:03:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:03:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(data)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:03:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(data)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:03:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.14ms
2020-05-11,15:03:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:03:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:03:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:03:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:03:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:03:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(data)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:03:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(data)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:03:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.57ms
2020-05-11,15:04:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:04:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:04:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:04:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:04:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:04:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:04:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:04:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:04:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:04:22 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.95ms
2020-05-11,15:04:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:04:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:04:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:04:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:04:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:04:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:04:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:04:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:04:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:04:22 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 23.21ms
2020-05-11,15:04:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:04:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:04:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:04:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:04:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:04:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:04:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:04:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:24 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:04:24 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:04:24 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.49ms
2020-05-11,15:04:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:04:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:04:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:04:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:04:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:04:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:04:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:04:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:04:24 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    for i in keys_csv:\n        dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:04:24 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     for i in keys_csv:
         dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:04:24 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.19ms
2020-05-11,15:05:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:05:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:05:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:05:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:05:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:05:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:05:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:05:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:05:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:05:40 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 27.37ms
2020-05-11,15:05:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:05:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:05:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:05:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:05:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:05:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:05:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:05:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:05:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:05:40 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 27.46ms
2020-05-11,15:05:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:05:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:05:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:05:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:05:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:05:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:05:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:05:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:05:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:05:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.43ms
2020-05-11,15:05:44 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:05:44 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:05:44 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:05:44 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:05:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:05:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:05:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:44 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:05:44 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:05:44 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:05:44 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:05:44 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.45ms
2020-05-11,15:06:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.40ms
2020-05-11,15:06:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.08ms
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.90ms
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 62.85ms
2020-05-11,15:06:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 67.99ms
2020-05-11,15:06:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 53.51ms
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.16ms
2020-05-11,15:06:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 52.96ms
2020-05-11,15:06:07 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,15:06:07 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,15:06:07 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,15:06:08 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,15:06:08 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,15:06:08 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,15:06:08 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,15:06:08 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,15:06:08 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,15:06:08 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,15:06:08 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,15:06:08 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,15:06:08 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,15:06:08 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,15:06:08 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,15:06:08 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,15:06:08 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,15:06:08 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,15:06:08 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,15:06:08 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,15:06:08 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,15:06:08 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,15:06:08 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,15:06:08 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,15:06:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 323.37ms
2020-05-11,15:06:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(first_row_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(first_row_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.39ms
2020-05-11,15:06:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:38 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print("first_row_csv")\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print("first_row_csv")
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.48ms
2020-05-11,15:06:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:38 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print("first_row_csv")\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print("first_row_csv")
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.55ms
2020-05-11,15:06:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.45ms
2020-05-11,15:06:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:06:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:06:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:06:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:06:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:06:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:06:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:06:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 23.07ms
2020-05-11,15:07:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:07:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:07:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.49ms
2020-05-11,15:07:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:07:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:07:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.17ms
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:07:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:07:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.63ms
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:07:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:07:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.19ms
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:07:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:07:14 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,15:07:14 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.41ms
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:07:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:07:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.94ms
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:07:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:07:28 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 23.45ms
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:28 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:28 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:28 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:28 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:07:28 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:07:28 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,15:07:28 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.97ms
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:07:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:07:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 27.72ms
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:07:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:07:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.73ms
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:07:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:07:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:07:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:07:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_json\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_json = get_globvar()\n\n    first_row_csv = get_first_row()\n    print(keys_csv)\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:07:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_json
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_json = get_globvar()
 
     first_row_csv = get_first_row()
     print(keys_csv)
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:07:46 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,15:07:46 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.57ms
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:08:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:08:10 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.71ms
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:08:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:08:10 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.25ms
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    #response = requests.get(url)\n    #iter = response.iter_lines()\n    print("###### THE URL #######")\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:08:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     #response = requests.get(url)
     #iter = response.iter_lines()
     print("###### THE URL #######")
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:08:10 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,15:08:10 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.40ms
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:08:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:08:27 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.56ms
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:08:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:08:27 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.75ms
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(iter)\n\n\n    #set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:08:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(iter)
 
 
     #set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:08:27 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,15:08:28 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,15:08:28 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,15:08:28 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 980.49ms
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:08:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:08:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.09ms
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:08:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:08:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.22ms
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:08:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:08:47 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,15:08:47 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,15:08:47 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="AttributeError : 'list' object has no attribute 'keys'"
2020-05-11,15:08:47 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 381.74ms
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:08:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:08:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.73ms
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:08:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:08:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.40ms
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:08:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:08:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:08:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:08:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:08:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:08:55 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,15:08:56 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,15:08:56 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="AttributeError : 'list' object has no attribute 'keys'"
2020-05-11,15:08:56 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 322.70ms
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:14:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:14:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:14:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:14:19 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.01ms
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:14:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:14:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:14:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:14:19 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 24.34ms
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:14:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:14:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:14:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:14:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(input):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(input):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = input.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n    print(next(iter))\n    print(next(iter))\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:14:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(input):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(input):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = input.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
     print(next(iter))
     print(next(iter))
 
 
     set_globvar(next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:14:19 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,15:14:32 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,15:14:32 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="AttributeError : 'list' object has no attribute 'keys'"
2020-05-11,15:14:32 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 13441.13ms
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:19:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:19:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = keys.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:19:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = keys.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:19:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 45.87ms
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:19:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:19:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = keys.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:19:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = keys.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:19:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 32.39ms
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:19:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:19:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:19:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:19:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if input == "Init":\n        keys_csv = input\n    else:\n        keys_csv = keys.keys()\n    first_row_csv = input\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:19:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if input == "Init":
         keys_csv = input
     else:
         keys_csv = keys.keys()
     first_row_csv = input
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:19:13 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,15:19:33 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,15:19:33 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="AttributeError : 'list' object has no attribute 'keys'"
2020-05-11,15:19:33 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 20438.43ms
2020-05-11,15:20:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:20:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:20:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:20:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:20:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:20:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:20:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:20:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys.keys()\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:20:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys.keys()
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:20:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.62ms
2020-05-11,15:20:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:20:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:20:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:20:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:20:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:20:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:20:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:20:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys.keys()\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:20:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys.keys()
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:20:17 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.97ms
2020-05-11,15:20:17 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:20:17 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:20:17 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:20:17 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:20:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:20:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:20:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:17 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:20:17 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:20:17 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys.keys()\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:20:17 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys.keys()
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:20:17 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,15:20:17 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,15:20:17 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="AttributeError : 'list' object has no attribute 'keys'"
2020-05-11,15:20:17 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 583.50ms
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:22:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:22:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:22:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:22:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.82ms
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:22:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:22:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:22:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:22:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.16ms
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:22:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:22:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:22:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:22:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n    print(url)\n\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    #data = list()\n    #for i in iter:\n    #    data.append(i.decode(\'utf-8\').split(\';\'))\n    #df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:22:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
     print(url)
 
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     #data = list()
     #for i in iter:
     #    data.append(i.decode('utf-8').split(';'))
     #df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:22:11 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,15:22:12 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,15:22:12 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'first_row_json' is not defined"
2020-05-11,15:22:12 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 818.18ms
2020-05-11,15:30:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:30:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:30:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:30:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:30:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:30:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:30:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:30:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:30:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:30:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:30:38 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:30:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:30:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 40.90ms
2020-05-11,15:30:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:30:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:30:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:30:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:30:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:30:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:30:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:30:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:30:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:30:38 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:30:38 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:30:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:30:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.52ms
2020-05-11,15:31:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:31:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:31:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:31:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:31:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:31:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:31:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:31:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:31:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:31:19 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:31:19 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 30.65ms
2020-05-11,15:31:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:31:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:31:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:31:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:31:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:31:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:31:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:31:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:31:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:31:19 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:31:19 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 27.95ms
2020-05-11,15:31:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:31:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:31:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:31:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:31:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:31:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:31:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:31:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:31:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:31:22 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:31:22 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 24.18ms
2020-05-11,15:31:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:31:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:31:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:31:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:31:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:31:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:31:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:31:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:31:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:31:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:31:22 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:31:22 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 30.44ms
2020-05-11,15:34:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:01 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:01 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 30.06ms
2020-05-11,15:34:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:01 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:01 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 34.60ms
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:07 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:07 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 38.56ms
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:07 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:07 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 95.41ms
2020-05-11,15:34:07 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:07 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 78.30ms
2020-05-11,15:34:07 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:07 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 61.37ms
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:07 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:07 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:07 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:07 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:07 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:07 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 64.99ms
2020-05-11,15:34:07 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:07 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 65.07ms
2020-05-11,15:34:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:24 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:24 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:24 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:24 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 27.53ms
2020-05-11,15:34:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:34:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:34:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:34:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:34:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:34:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:34:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:34:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:34:24 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:34:24 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:34:24 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:34:24 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 29.21ms
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:09 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:09 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 35.66ms
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:09 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:09 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 107.56ms
2020-05-11,15:35:09 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:09 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 93.41ms
2020-05-11,15:35:09 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:09 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 76.34ms
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:09 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:09 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 56.36ms
2020-05-11,15:35:09 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:09 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 56.36ms
2020-05-11,15:35:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:27 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:27 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 61.46ms
2020-05-11,15:35:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:27 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:27 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 31.44ms
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:31 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:31 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 38.83ms
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:31 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:31 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 88.25ms
2020-05-11,15:35:31 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:31 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 87.53ms
2020-05-11,15:35:31 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:31 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 87.74ms
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:31 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:31 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 60.49ms
2020-05-11,15:35:31 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:35:31 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 60.37ms
2020-05-11,15:35:35 [CRITICAL] (app.py:app:117): Exiting on signal 2...
2020-05-11,15:35:35 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,15:35:35 [INFO] (app.py:app:123): Shutting down TabPy...
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter port set to "9004" from default value
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter server_version set to "1.0.0" from default value
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter evaluate_timeout set to "30" from default value
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter upload_dir set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tmp/query_objects" from default value
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter transfer_protocol set to "http" from default value
2020-05-11,15:35:37 [DEBUG] (app.py:app:212): Parameter certificate_file is not set
2020-05-11,15:35:37 [DEBUG] (app.py:app:212): Parameter key_file is not set
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter state_file_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server" from default value
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter static_path set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static" from default value
2020-05-11,15:35:37 [DEBUG] (app.py:app:212): Parameter TABPY_PWD_FILE is not set
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter log_request_context set to "false" from default value
2020-05-11,15:35:37 [DEBUG] (app.py:app:206): Parameter max_request_size_in_mb set to "100" from default value
2020-05-11,15:35:37 [INFO] (app.py:app:436): Loading state from state file /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/state.ini
2020-05-11,15:35:37 [DEBUG] (app.py:app:315): Static pages folder set to "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tabpy/tabpy_server/static"
2020-05-11,15:35:37 [INFO] (app.py:app:334): Password file is not specified: Authentication is not enabled
2020-05-11,15:35:37 [INFO] (app.py:app:348): Call context logging is disabled
2020-05-11,15:35:37 [INFO] (app.py:app:125): Initializing TabPy...
2020-05-11,15:35:37 [DEBUG] (selector_events.py:selector_events:58): Using selector: KqueueSelector
2020-05-11,15:35:37 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-05-11,15:35:37 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,15:35:37 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,15:35:37 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,15:35:37 [INFO] (app.py:app:129): Done initializing TabPy.
2020-05-11,15:35:37 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-05-11,15:35:37 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-05-11,15:35:37 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-05-11,15:35:37 [DEBUG] (state.py:state:616): Returning value '[]'
2020-05-11,15:35:37 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-05-11,15:35:37 [INFO] (app.py:app:107): Web service listening on port 9004
2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:40 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : set_globvar() missing 1 required positional argument: 'first_row'"
2020-05-11,15:35:40 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 315.42ms
2020-05-11,15:35:40 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : set_globvar() missing 1 required positional argument: 'first_row'"
2020-05-11,15:35:40 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 263.06ms
2020-05-11,15:35:40 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : set_globvar() missing 1 required positional argument: 'first_row'"
2020-05-11,15:35:40 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 236.28ms
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:35:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:35:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:35:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:35:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:35:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:35:40 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : set_globvar() missing 1 required positional argument: 'first_row'"
2020-05-11,15:35:40 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 28.19ms
2020-05-11,15:35:40 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : set_globvar() missing 1 required positional argument: 'first_row'"
2020-05-11,15:35:40 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 27.91ms
2020-05-11,15:35:40 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : set_globvar() missing 1 required positional argument: 'first_row'"
2020-05-11,15:35:40 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 27.67ms
2020-05-11,15:36:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:36:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:36:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:36:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:36:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:36:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:36:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:36:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:36:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:36:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.21ms
2020-05-11,15:36:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:36:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:36:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:36:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:36:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:36:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:36:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:36:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:36:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:36:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.53ms
2020-05-11,15:36:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:36:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:36:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:36:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:36:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:36:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:36:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:36:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:36:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:36:10 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,15:36:10 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,15:36:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 1090.10ms
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:36:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:36:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:36:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:36:19 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.12ms
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:36:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:36:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:36:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:36:19 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.62ms
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:36:19 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:36:19 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:36:19 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:36:19 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['http://127.0.0.1:3000/api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response["referrals"][0])\n    #set_first_row(response["referrals"][0])\n\n    data = list()\n    for item in response["referrals"]:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        print("KEYS_INIT")\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    dict = {}\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:36:19 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response["referrals"][0])
     #set_first_row(response["referrals"][0])
 
     data = list()
     for item in response["referrals"]:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         print("KEYS_INIT")
         set_globvar("Init")
 
     keys_json = get_globvar()
 
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     dict = {}
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:36:19 [DEBUG] (connectionpool.py:connectionpool:230): Starting new HTTP connection (1): 127.0.0.1:3000
2020-05-11,15:36:20 [DEBUG] (connectionpool.py:connectionpool:442): http://127.0.0.1:3000 "GET /api/datahub/v1/article/content-folder/referrals?id=2.7560&id=2.7605&from=2020-04-01T05%3A58%3A05.283Z&to=2020-04-01T09%3A59%3A35.014Z&publishedInsideDateRange=false HTTP/1.1" 200 None
2020-05-11,15:36:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 545.68ms
2020-05-11,15:37:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:37:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:37:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:37:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:37:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:37:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:37:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:37:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:37:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:37:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:37:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:37:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:37:06 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : set_globvar() missing 1 required positional argument: 'first_row'"
2020-05-11,15:37:06 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.51ms
2020-05-11,15:37:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:37:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:37:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:37:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:37:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:37:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:37:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:37:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:37:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:37:06 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:37:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init")\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:37:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
 
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init")
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:37:06 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : set_globvar() missing 1 required positional argument: 'first_row'"
2020-05-11,15:37:06 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 15.28ms
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:38:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:38:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:38:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:38:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.09ms
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:38:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:38:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:38:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:38:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 24.18ms
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:38:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:38:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:38:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': [None], 'url': ["https://api.instarsuite.com/norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT TOP 100 INGR_CHANNELS.ATTR_NAME, CALC_DPS.UNIT_RTG, CALC_DPS.UNIT_RTGPCT, CALC_DPS.UNIT_SHR FROM CALC_DPS, INGR_CHANNELS WHERE INGR_CHANNELS.ATTR_ID LIKE '1:%' ORDER  BY CALC_DPS.UNIT_RTG DESC LIMIT 300 OFFSET 0&tqx=reqId:9"]}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    dict = {}\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n    data = list()\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\nexecution_result = get_query_csv(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-11,15:38:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     dict = {}
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
     data = list()
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 execution_result = get_query_csv(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-11,15:38:02 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): api.instarsuite.com:443
2020-05-11,15:38:04 [DEBUG] (connectionpool.py:connectionpool:442): https://api.instarsuite.com:443 "GET /norwaytvov/IADS.asmx/GetData?iads_params=name:NRK-NO-API-1;password:wySGA3M9h;idLang:EN;idApp:3000;outformat:CSV;skipmetadata:1&tq=SELECT%20TOP%20100%20INGR_CHANNELS.ATTR_NAME,%20CALC_DPS.UNIT_RTG,%20CALC_DPS.UNIT_RTGPCT,%20CALC_DPS.UNIT_SHR%20FROM%20CALC_DPS,%20INGR_CHANNELS%20WHERE%20INGR_CHANNELS.ATTR_ID%20LIKE%20'1:%25'%20ORDER%20%20BY%20CALC_DPS.UNIT_RTG%20DESC%20LIMIT%20300%20OFFSET%200&tqx=reqId:9 HTTP/1.1" 200 1406
2020-05-11,15:38:04 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="UnboundLocalError : local variable 'data' referenced before assignment"
2020-05-11,15:38:04 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 1950.72ms
2020-05-11,15:38:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:38:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:38:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:38:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:38:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:38:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:38:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:38:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    \n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:38:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
     
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:38:47 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:38:47 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 28.82ms
2020-05-11,15:38:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:38:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:38:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:38:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:38:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:38:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:38:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:38:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    \n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:38:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
     
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:38:47 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:38:47 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 22.55ms
2020-05-11,15:38:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:38:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:38:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:38:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:38:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:38:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:38:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:38:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    \n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:38:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
     
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:38:54 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:38:54 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 34.25ms
2020-05-11,15:38:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:38:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:38:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:38:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:38:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:38:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:38:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:38:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:38:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n    \n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        print("YES")\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:38:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
     
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         print("YES")
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:38:54 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:38:54 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 43.08ms
2020-05-11,15:39:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:39:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:39:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:39:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:39:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:39:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:39:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:39:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:18 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            print(i)\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:39:18 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             print(i)
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:39:18 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:39:18 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 39.23ms
2020-05-11,15:39:18 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:39:18 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:39:18 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:39:18 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:39:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:39:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:39:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:18 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:39:18 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:18 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            print(i)\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:39:18 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             print(i)
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:39:18 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:39:18 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 23.53ms
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:39:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            print(i)\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             print(i)
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:39:22 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:39:22 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 32.48ms
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:39:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            print(i)\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             print(i)
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:39:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            print(i)\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             print(i)
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:39:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            print(i)\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             print(i)
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:39:22 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:39:22 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 78.00ms
2020-05-11,15:39:22 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:39:22 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 66.79ms
2020-05-11,15:39:22 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : list indices must be integers or slices, not str"
2020-05-11,15:39:22 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 47.04ms
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-11,15:39:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'F2': ['prep_string_type'], 'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'0eae8527-abd9-4fff-93f2-96bc3b6782fa\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\n\nkeys_csv = \'\'\nfirst_row_csv = \'\'\n\ndef set_first_row(keys):\n    global first_row_csv # Needed to modify global copy of globvar\n    first_row_csv = input\n\ndef get_first_row():\n    global first_row_csv\n    return first_row_csv\n\n\ndef set_globvar(keys,first_row):\n    global keys_csv  # Needed to modify global copy of globvar\n    global first_row_csv\n    print(keys)\n    print(first_row)\n    if keys == "Init":\n        keys_csv = keys\n    else:\n        keys_csv = keys\n    first_row_csv = first_row\n\ndef get_globvar():\n    global keys_csv\n    return keys_csv\n\n\ndef get_query_csv(url):\n    global first_row_csv\n    print("######## VAMONOS KILLO $$$$$")\n    url = f\'{url.iloc[0]["url"]}\'\n\n    response = requests.get(url)\n    iter = response.iter_lines()\n\n\n    set_globvar(next(iter).decode(\'utf-8\').split(\';\'),next(iter).decode(\'utf-8\').split(\';\'))\n\n    data = list()\n\n    for i in iter:\n        data.append(i.decode(\'utf-8\').split(\';\'))\n    df = pd.DataFrame(data, columns=get_globvar())\n\n    #return df\n    return pd.DataFrame(first_row_json)\n\n\ndef get_output_schema():\n    global keys_csv\n    global first_row_csv\n    print("#########HOLALA#####")\n    if not "keys_csv" in globals():\n        set_globvar("Init",\'\')\n    print(globals())\n    keys_csv = get_globvar()\n\n    first_row_csv = get_first_row()\n\n    dict = {}\n\n\n    if keys_csv == \'Init\':\n        for i in keys_csv:\n            dict[i] = prep_string()\n    else:\n        for i in keys_csv:\n            print(i)\n            if isinstance(first_row_csv[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    return pd.DataFrame(dict)\ndef get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-11,15:39:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '0eae8527-abd9-4fff-93f2-96bc3b6782fa'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 
 keys_csv = ''
 first_row_csv = ''
 
 def set_first_row(keys):
     global first_row_csv # Needed to modify global copy of globvar
     first_row_csv = input
 
 def get_first_row():
     global first_row_csv
     return first_row_csv
 
 
 def set_globvar(keys,first_row):
     global keys_csv  # Needed to modify global copy of globvar
     global first_row_csv
     print(keys)
     print(first_row)
     if keys == "Init":
         keys_csv = keys
     else:
         keys_csv = keys
     first_row_csv = first_row
 
 def get_globvar():
     global keys_csv
     return keys_csv
 
 
 def get_query_csv(url):
     global first_row_csv
     print("######## VAMONOS KILLO $$$$$")
     url = f'{url.iloc[0]["url"]}'
 
     response = requests.get(url)
     iter = response.iter_lines()
 
 
     set_globvar(next(iter).decode('utf-8').split(';'),next(iter).decode('utf-8').split(';'))
 
     data = list()
 
     for i in iter:
         data.append(i.decode('utf-8').split(';'))
     df = pd.DataFrame(data, columns=get_globvar())
 
     #return df
     return pd.DataFrame(first_row_json)
 
 
 def get_output_schema():
     global keys_csv
     global first_row_csv
     print("#########HOLALA#####")
     if not "keys_csv" in globals():
         set_globvar("Init",'')
     print(globals())
     keys_csv = get_globvar()
 
     first_row_csv = get_first_row()
 
     dict = {}
 
 
     if keys_csv == 'Init':
         for i in keys_csv:
             dict[i] = prep_string()
     else:
         for i in keys_csv:
             print(i)
             if isinstance(first_row_csv[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     return pd.DataFrame(dict)
 def get_output_schema_5188084eafe649cf81246f84410dfb50(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_5188084eafe649cf81246f84410dfb50(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-11,15:39:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-11,15:39:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-11,15:39:22 [DEBUG] (state.py:state:616): Returning value ''
