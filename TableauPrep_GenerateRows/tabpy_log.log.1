2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:08:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 507.17ms
2020-05-28,18:08:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 334.54ms
2020-05-28,18:08:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 160.17ms
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:08:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:08:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 55.99ms
2020-05-28,18:08:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 34.86ms
2020-05-28,18:08:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 34.40ms
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:08:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:08:35 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:08:35 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:08:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 263.01ms
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:08:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:08:40 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.91ms
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:08:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:08:40 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.15ms
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:08:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:08:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:08:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:08:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:08:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:08:40 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:08:40 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:08:40 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 185.22ms
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:09:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:09:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_string()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:09:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_string()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:09:39 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.90ms
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:09:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:09:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_string()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:09:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_string()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:09:39 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.58ms
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:09:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:09:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:09:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_string()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:09:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_string()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:09:39 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:09:39 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:09:39 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 251.44ms
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:09:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:09:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_string()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:09:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_string()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:09:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 28.83ms
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:09:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:09:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_string()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:09:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_string()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:09:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 24.97ms
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:09:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:09:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:09:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:09:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_string()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:09:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_string()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:09:43 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:09:43 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:09:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 190.54ms
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:10:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:10:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:10:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:10:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.15ms
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:10:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:10:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:10:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:10:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.89ms
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:10:13 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:10:13 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:10:13 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:10:13 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:10:13 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:10:13 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:10:13 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:10:13 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 247.80ms
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:20:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:20:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:20:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:20:15 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.58ms
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:20:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:20:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:20:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:20:15 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 39.52ms
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:20:15 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:20:15 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:20:15 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:20:15 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:20:15 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:20:15 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:20:20 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:20:20 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5130.62ms
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:25:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:25:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print(first_row_json[i]+" -- "+ i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:25:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print(first_row_json[i]+" -- "+ i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:25:22 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.45ms
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:25:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:25:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print(first_row_json[i]+" -- "+ i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:25:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print(first_row_json[i]+" -- "+ i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:25:22 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 31.35ms
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:25:22 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:25:22 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:25:22 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:25:22 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print(first_row_json[i]+" -- "+ i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:25:22 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print(first_row_json[i]+" -- "+ i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:25:22 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:25:22 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:25:22 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 319.23ms
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:26:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:26:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print( i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:26:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print( i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:26:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.12ms
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:26:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:26:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print( i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:26:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print( i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:26:41 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 27.29ms
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:26:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:26:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:26:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:26:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print( i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:26:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print( i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:26:41 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:26:42 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:26:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 528.17ms
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:27:21 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:27:21 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print("HOLALLA")\n                print(i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:27:21 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print("HOLALLA")
                 print(i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:27:21 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 35.60ms
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:27:21 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:27:21 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print("HOLALLA")\n                print(i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:27:21 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print("HOLALLA")
                 print(i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:27:21 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 29.35ms
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:27:21 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:27:21 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:27:21 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:27:21 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print("HOLALLA")\n                print(i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:27:21 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print("HOLALLA")
                 print(i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:27:21 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:27:21 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:27:21 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 361.65ms
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:28:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:28:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print("HOLALLA")\n                print(i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:28:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print("HOLALLA")
                 print(i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:28:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.30ms
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:28:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:28:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print("HOLALLA")\n                print(i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:28:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print("HOLALLA")
                 print(i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:28:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 26.17ms
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:28:02 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:28:02 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:28:02 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:02 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            if isinstance(first_row_json[i], int):\n                print("HOLALLA")\n                print(i)\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:28:02 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             if isinstance(first_row_json[i], int):
                 print("HOLALLA")
                 print(i)
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:28:02 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:28:02 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:28:02 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 263.25ms
2020-05-28,18:28:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:28:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:28:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:28:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:28:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:28:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:28:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:28:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:28:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:28:27 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : unsupported operand type(s) for +: 'float' and 'str'"
2020-05-28,18:28:27 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.67ms
2020-05-28,18:28:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:28:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:28:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:28:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:28:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:28:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:28:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:28:27 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ i)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:28:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ i)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:28:27 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : unsupported operand type(s) for +: 'float' and 'str'"
2020-05-28,18:28:27 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 14.35ms
2020-05-28,18:28:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:28:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:28:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:28:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:28:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:28:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:28:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:28:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ instance(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:28:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ instance(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:28:57 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'instance' is not defined"
2020-05-28,18:28:57 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.43ms
2020-05-28,18:28:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:28:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:28:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:28:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:28:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:28:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:28:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:28:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:28:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ instance(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:28:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ instance(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:28:57 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'instance' is not defined"
2020-05-28,18:28:57 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 13.13ms
2020-05-28,18:29:12 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:29:12 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:29:12 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:29:12 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:29:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:29:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:29:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:29:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:12 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ isinstance(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:29:12 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ isinstance(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:29:12 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : isinstance expected 2 arguments, got 1"
2020-05-28,18:29:12 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.79ms
2020-05-28,18:29:12 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:29:12 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:29:12 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:29:12 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:29:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:29:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:29:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:29:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:12 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ isinstance(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:29:12 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ isinstance(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:29:12 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : isinstance expected 2 arguments, got 1"
2020-05-28,18:29:12 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 12.84ms
2020-05-28,18:29:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:29:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:29:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:29:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:29:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:29:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:29:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:29:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:29:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:29:25 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : can only concatenate str (not "bool") to str"
2020-05-28,18:29:25 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 17.40ms
2020-05-28,18:29:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:29:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:29:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:29:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:29:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:29:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:29:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:29:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:29:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:29:25 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : can only concatenate str (not "bool") to str"
2020-05-28,18:29:25 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.54ms
2020-05-28,18:29:29 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:29:29 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:29:29 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:29:29 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:29:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:29:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:29:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:29:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:29 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:29:29 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:29:29 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : can only concatenate str (not "bool") to str"
2020-05-28,18:29:29 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.70ms
2020-05-28,18:29:29 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:29:29 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:29:29 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:29:29 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:29:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:29:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:29:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:29:29 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:29 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:29:29 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:29:29 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : can only concatenate str (not "bool") to str"
2020-05-28,18:29:29 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.80ms
2020-05-28,18:29:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:29:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:29:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:29:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:29:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:29:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:29:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:29:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:29:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:29:41 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : can only concatenate str (not "bool") to str"
2020-05-28,18:29:41 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 14.00ms
2020-05-28,18:29:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:29:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:29:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:29:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:29:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:29:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:29:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:29:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:29:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:29:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ isinstance(first_row_json[i],int))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:29:41 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : can only concatenate str (not "bool") to str"
2020-05-28,18:29:41 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.18ms
2020-05-28,18:30:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:30:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:30:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:30:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:30:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:30:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:30:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:30:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:30:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:30:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:30:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:30:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:30:36 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : can only concatenate str (not "type") to str"
2020-05-28,18:30:36 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 11.68ms
2020-05-28,18:30:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:30:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:30:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:30:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:30:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:30:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:30:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:30:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:30:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:30:36 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:30:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i]+" -- "+ type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:30:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i]+" -- "+ type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:30:36 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : can only concatenate str (not "type") to str"
2020-05-28,18:30:36 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 10.83ms
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:31:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:31:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:31:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:31:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 34.68ms
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:31:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:31:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:31:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:31:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.08ms
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:31:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:31:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:31:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:31:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:31:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:31:46 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:31:46 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:31:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 276.20ms
2020-05-28,18:34:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:34:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:34:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:34:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:34:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:34:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:34:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:34:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:34:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:34:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 38.34ms
2020-05-28,18:34:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:34:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:34:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:34:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:34:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:34:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:34:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:34:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:34:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:34:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 30.62ms
2020-05-28,18:34:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:34:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:34:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:34:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:34:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:34:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n\n    first_row_json = get_first_row()\n    print(":::::::::")\n    print(first_row_json)\n    print("??????????????????")\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n    print(pd.DataFrame(dict))\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:34:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
 
     first_row_json = get_first_row()
     print(":::::::::")
     print(first_row_json)
     print("??????????????????")
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
     print(pd.DataFrame(dict))
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:34:01 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:34:01 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:34:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 231.03ms
2020-05-28,18:37:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:37:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:37:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:37:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:37:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:37:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:37:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:37:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i === "from":\n                    dict[i] = date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:37:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i === "from":
                     dict[i] = date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:37:39 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 85)"
2020-05-28,18:37:39 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 23.69ms
2020-05-28,18:37:39 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:37:39 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:37:39 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:37:39 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:37:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:37:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:37:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:39 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:37:39 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:39 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i === "from":\n                    dict[i] = date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:37:39 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i === "from":
                     dict[i] = date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:37:39 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 85)"
2020-05-28,18:37:39 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 13.33ms
2020-05-28,18:37:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:37:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:37:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:37:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:37:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:37:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:37:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:37:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i === "from":\n                    dict[i] = date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:37:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i === "from":
                     dict[i] = date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:37:53 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 85)"
2020-05-28,18:37:53 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.76ms
2020-05-28,18:37:53 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:37:53 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:37:53 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:37:53 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:37:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:37:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:37:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:53 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:37:53 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:37:53 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i === "from":\n                    dict[i] = date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:37:53 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i === "from":
                     dict[i] = date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:37:53 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 85)"
2020-05-28,18:37:53 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.07ms
2020-05-28,18:38:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:38:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:38:11 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'date' is not defined"
2020-05-28,18:38:11 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 9.67ms
2020-05-28,18:38:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:38:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:38:11 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'date' is not defined"
2020-05-28,18:38:11 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 11.23ms
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:38:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:38:25 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.66ms
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:38:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:38:25 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.19ms
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:25 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:25 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:25 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:25 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:38:25 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:38:25 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:38:26 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:38:26 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 262.85ms
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:38:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:38:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.20ms
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:38:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:38:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.51ms
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:31 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_date()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:38:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_date()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:38:31 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:38:33 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:38:33 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 1450.93ms
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:38:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:38:56 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.04ms
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:38:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:38:56 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 14.20ms
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:38:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:38:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:38:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:38:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:38:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:38:56 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:38:56 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:38:56 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 396.82ms
2020-05-28,18:39:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.54ms
2020-05-28,18:39:01 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:01 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:01 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:01 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:01 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:01 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:01 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:01 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:01 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.55ms
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:08 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:08 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:08 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:08 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.57ms
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:08 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:08 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:08 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:08 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.70ms
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:08 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:08 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:08 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:08 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 14.52ms
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:08 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:08 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:08 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:08 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:08 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:08 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.66ms
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.16ms
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.33ms
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:34 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:39:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:39:34 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:39:34 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:39:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 291.63ms
2020-05-28,18:39:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" || i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" || i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:56 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 85)"
2020-05-28,18:39:56 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 13.64ms
2020-05-28,18:39:56 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:56 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:56 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:56 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:56 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:56 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:56 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" || i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:56 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" || i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:56 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 85)"
2020-05-28,18:39:56 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.21ms
2020-05-28,18:39:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" || i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" || i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:59 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 85)"
2020-05-28,18:39:59 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.03ms
2020-05-28,18:39:59 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:39:59 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:39:59 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:39:59 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:39:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:39:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:39:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:59 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:39:59 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:39:59 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" || i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:39:59 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" || i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:39:59 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 85)"
2020-05-28,18:39:59 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 8.14ms
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:40:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:40:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" or i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:40:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" or i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:40:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.17ms
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:40:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:40:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" or i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:40:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" or i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:40:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.43ms
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:40:35 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:40:35 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:40:35 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:35 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" or i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:40:35 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" or i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:40:35 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:40:35 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:40:35 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 204.31ms
2020-05-28,18:40:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:40:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:40:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:40:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:40:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:40:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:40:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:40:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" :\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:40:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" :
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:40:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.90ms
2020-05-28,18:40:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:40:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:40:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:40:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:40:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:40:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:40:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:40:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" :\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:40:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" :
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:40:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.76ms
2020-05-28,18:40:55 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:40:55 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:40:55 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:40:55 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:40:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:40:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:40:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:55 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:40:55 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:40:55 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" :\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:40:55 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" :
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:40:55 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:40:55 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:40:55 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 184.74ms
2020-05-28,18:41:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:41:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:41:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:41:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:41:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:41:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:41:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:41:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" or i =="to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:41:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" or i =="to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:41:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.66ms
2020-05-28,18:41:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:41:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:41:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:41:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:41:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:41:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:41:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:41:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" or i =="to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:41:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" or i =="to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:41:12 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 18.60ms
2020-05-28,18:41:12 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:41:12 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:41:12 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:41:12 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:41:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:41:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:41:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:12 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:41:12 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:12 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from" or i =="to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:41:12 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from" or i =="to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:41:12 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:41:12 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:41:12 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 193.37ms
2020-05-28,18:41:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:41:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:41:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:41:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:41:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:41:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:41:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:41:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:41:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:41:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.31ms
2020-05-28,18:41:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:41:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:41:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:41:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:41:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:41:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:41:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:41:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:41:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:41:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.89ms
2020-05-28,18:41:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:41:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:41:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:41:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:41:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:41:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:41:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:41:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:41:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:41:43 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:41:43 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:41:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 200.10ms
2020-05-28,18:41:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:41:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:41:45 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:41:45 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:41:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:41:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:41:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:41:45 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:45 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:41:45 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:41:45 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.56ms
2020-05-28,18:41:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:41:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:41:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:41:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:41:46 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:41:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:41:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:41:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 21.27ms
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:42:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:42:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:42:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:42:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.78ms
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:42:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:42:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:42:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:42:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.89ms
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:42:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:42:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:42:16 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:42:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:42:16 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:42:16 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:42:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 230.25ms
2020-05-28,18:42:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:42:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:42:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:42:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:42:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:42:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:42:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:42:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:24 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:42:24 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:42:24 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.71ms
2020-05-28,18:42:24 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:42:24 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:42:24 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:42:24 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:42:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:42:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:42:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:24 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:42:24 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:42:24 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n\n    print(response[0])\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:42:24 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
 
     print(response[0])
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:42:24 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.02ms
2020-05-28,18:45:26 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:45:26 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:45:26 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:45:26 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:45:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:45:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:45:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:45:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:26 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_obj = datetime.datetime.strptime(date_string, irst_row_json[i]))\n            print(date_obj)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:45:26 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_obj = datetime.datetime.strptime(date_string, irst_row_json[i]))
             print(date_obj)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:45:26 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 79)"
2020-05-28,18:45:26 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 11.26ms
2020-05-28,18:45:26 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:45:26 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:45:26 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:45:26 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:45:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:45:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:45:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:26 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:45:26 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:26 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_obj = datetime.datetime.strptime(date_string, irst_row_json[i]))\n            print(date_obj)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:45:26 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_obj = datetime.datetime.strptime(date_string, irst_row_json[i]))
             print(date_obj)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:45:26 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 79)"
2020-05-28,18:45:26 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 13.52ms
2020-05-28,18:45:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:45:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:45:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:45:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:45:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:45:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:45:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:45:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_obj = datetime.datetime.strptime(date_string, irst_row_json[i])\n            print(date_obj)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:45:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_obj = datetime.datetime.strptime(date_string, irst_row_json[i])
             print(date_obj)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:45:41 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'date_string' is not defined"
2020-05-28,18:45:41 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 25.71ms
2020-05-28,18:45:41 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:45:41 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:45:41 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:45:41 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:45:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:45:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:45:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:41 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:45:41 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:45:41 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_obj = datetime.datetime.strptime(date_string, irst_row_json[i])\n            print(date_obj)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:45:41 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_obj = datetime.datetime.strptime(date_string, irst_row_json[i])
             print(date_obj)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:45:41 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'date_string' is not defined"
2020-05-28,18:45:41 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 16.15ms
2020-05-28,18:46:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:46:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:46:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:46:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:46:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_obj = datetime.datetime.strptime(first_row_json[i])\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:46:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_obj = datetime.datetime.strptime(first_row_json[i])
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:46:10 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : strptime() takes exactly 2 arguments (1 given)"
2020-05-28,18:46:10 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 70.62ms
2020-05-28,18:46:10 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:46:10 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:46:10 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:46:10 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:46:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:46:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:46:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:10 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:46:10 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:10 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_obj = datetime.datetime.strptime(first_row_json[i])\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:46:10 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_obj = datetime.datetime.strptime(first_row_json[i])
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:46:10 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="TypeError : strptime() takes exactly 2 arguments (1 given)"
2020-05-28,18:46:10 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 28.57ms
2020-05-28,18:46:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:46:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:46:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:46:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:46:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:46:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:46:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:46:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_format = \'%Y-%m-%d\'\n            date_obj = datetime.datetime.strptime(first_row_json[i],date_format)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:46:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_format = '%Y-%m-%d'
             date_obj = datetime.datetime.strptime(first_row_json[i],date_format)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:46:43 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="ValueError : time data 'pp:1.14921287' does not match format '%Y-%m-%d'"
2020-05-28,18:46:43 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 28.33ms
2020-05-28,18:46:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:46:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:46:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:46:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:46:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:46:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:46:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:46:43 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:46:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_format = \'%Y-%m-%d\'\n            date_obj = datetime.datetime.strptime(first_row_json[i],date_format)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:46:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_format = '%Y-%m-%d'
             date_obj = datetime.datetime.strptime(first_row_json[i],date_format)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:46:43 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="ValueError : time data 'pp:1.14921287' does not match format '%Y-%m-%d'"
2020-05-28,18:46:43 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 11.15ms
2020-05-28,18:50:32 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:50:32 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:50:32 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:50:32 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:50:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:50:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:50:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:50:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:32 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_format = \'%Y-%m-%d\'\n            date_obj = datetime.datetime.strptime(first_row_json[i],date_format)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:50:32 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_format = '%Y-%m-%d'
             date_obj = datetime.datetime.strptime(first_row_json[i],date_format)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:50:32 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="ValueError : time data 'pp:1.14921287' does not match format '%Y-%m-%d'"
2020-05-28,18:50:32 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 19.90ms
2020-05-28,18:50:32 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:50:32 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:50:32 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:50:32 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:50:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:50:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:50:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:32 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:50:32 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:32 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            date_format = \'%Y-%m-%d\'\n            date_obj = datetime.datetime.strptime(first_row_json[i],date_format)\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:50:32 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             date_format = '%Y-%m-%d'
             date_obj = datetime.datetime.strptime(first_row_json[i],date_format)
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:50:32 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="ValueError : time data 'pp:1.14921287' does not match format '%Y-%m-%d'"
2020-05-28,18:50:32 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 14.45ms
2020-05-28,18:50:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:50:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:50:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:50:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:50:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:50:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:50:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:50:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            \n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:50:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:50:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.74ms
2020-05-28,18:50:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:50:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:50:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:50:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:50:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:50:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:50:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:50:47 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            \n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:50:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:50:48 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 25.06ms
2020-05-28,18:50:48 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:50:48 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:50:48 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:50:48 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:50:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:50:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:50:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:48 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:50:48 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:50:48 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n            \n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                if i == "from":\n                    dict[i] = prep_datetime()\n                if i == "to":\n                    dict[i] = prep_datetime()\n                if i == "published":\n                    dict[i] = prep_datetime()\n                else:\n                    dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:50:48 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
             
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 if i == "from":
                     dict[i] = prep_datetime()
                 if i == "to":
                     dict[i] = prep_datetime()
                 if i == "published":
                     dict[i] = prep_datetime()
                 else:
                     dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:50:48 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:50:53 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:50:53 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5436.58ms
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:51:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:51:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            if i == "from":\n                dict[i] = prep_datetime()\n            if i == "to":\n                dict[i] = prep_datetime()\n            if i == "published":\n                dict[i] = prep_datetime()\n                \n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:51:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             if i == "from":
                 dict[i] = prep_datetime()
             if i == "to":
                 dict[i] = prep_datetime()
             if i == "published":
                 dict[i] = prep_datetime()
                 
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:51:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.02ms
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:51:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:51:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            if i == "from":\n                dict[i] = prep_datetime()\n            if i == "to":\n                dict[i] = prep_datetime()\n            if i == "published":\n                dict[i] = prep_datetime()\n                \n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:51:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             if i == "from":
                 dict[i] = prep_datetime()
             if i == "to":
                 dict[i] = prep_datetime()
             if i == "published":
                 dict[i] = prep_datetime()
                 
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:51:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.60ms
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:51:54 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:51:54 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:51:54 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:51:54 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            if i == "from":\n                dict[i] = prep_datetime()\n            if i == "to":\n                dict[i] = prep_datetime()\n            if i == "published":\n                dict[i] = prep_datetime()\n                \n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:51:54 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             if i == "from":
                 dict[i] = prep_datetime()
             if i == "to":
                 dict[i] = prep_datetime()
             if i == "published":
                 dict[i] = prep_datetime()
                 
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:51:54 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:51:54 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:51:54 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 214.47ms
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:52:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:52:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            if i == "from":\n                dict[i] = prep_datetime()\n            if i == "to":\n                dict[i] = prep_datetime()\n            if i == "published":\n                dict[i] = prep_datetime()\n\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:52:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             if i == "from":
                 dict[i] = prep_datetime()
             if i == "to":
                 dict[i] = prep_datetime()
             if i == "published":
                 dict[i] = prep_datetime()
 
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:52:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.28ms
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:52:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:52:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            if i == "from":\n                dict[i] = prep_datetime()\n            if i == "to":\n                dict[i] = prep_datetime()\n            if i == "published":\n                dict[i] = prep_datetime()\n\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:52:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             if i == "from":
                 dict[i] = prep_datetime()
             if i == "to":
                 dict[i] = prep_datetime()
             if i == "published":
                 dict[i] = prep_datetime()
 
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:52:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.52ms
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:52:14 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:52:14 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:52:14 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:52:14 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            if isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            if i == "from":\n                dict[i] = prep_datetime()\n            if i == "to":\n                dict[i] = prep_datetime()\n            if i == "published":\n                dict[i] = prep_datetime()\n\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:52:14 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             if isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             if i == "from":
                 dict[i] = prep_datetime()
             if i == "to":
                 dict[i] = prep_datetime()
             if i == "published":
                 dict[i] = prep_datetime()
 
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:52:14 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:52:14 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:52:14 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 288.88ms
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.36ms
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.49ms
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:03 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud/v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100']}}, 'script': 'import pandas as pd\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\nexecution_result = get_query_json(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2020-05-28,18:54:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 execution_result = get_query_json(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-05-28,18:54:03 [DEBUG] (connectionpool.py:connectionpool:941): Starting new HTTPS connection (1): datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443
2020-05-28,18:54:03 [DEBUG] (connectionpool.py:connectionpool:442): https://datahub-api-varnish.intern-we.drift.azure.nrk.cloud:443 "GET /v1/service/sorted-list?id=nrkno&from=2020-01-01T22%3A00%3A00Z&to=2020-05-19T22%3A00%3A00Z&sort=asc&limit=100 HTTP/1.1" 200 None
2020-05-28,18:54:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 236.17ms
2020-05-28,18:54:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.62ms
2020-05-28,18:54:09 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:09 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:09 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:09 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:09 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:09 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:09 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:09 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:09 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.79ms
2020-05-28,18:54:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:40 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 34.60ms
2020-05-28,18:54:40 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:40 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:40 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:40 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:40 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:40 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:40 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:40 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:40 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 61.52ms
2020-05-28,18:54:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 13.34ms
2020-05-28,18:54:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:42 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:42 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 20.15ms
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.26ms
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 14.69ms
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.66ms
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:49 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:49 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:49 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.54ms
2020-05-28,18:54:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 14.74ms
2020-05-28,18:54:57 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:54:57 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:54:57 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:54:57 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:57 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:54:57 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:54:57 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:54:57 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:54:57 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 18.15ms
2020-05-28,18:55:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:55:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:55:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:55:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:55:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:55:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:55:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:55:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:55:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:55:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 20.31ms
2020-05-28,18:55:00 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:55:00 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:55:00 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:55:00 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:55:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:55:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:55:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:00 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:55:00 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:00 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:55:00 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:55:00 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 17.87ms
2020-05-28,18:55:04 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:55:04 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:55:04 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:55:04 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:55:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:55:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:55:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:55:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:04 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:55:04 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:55:04 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.96ms
2020-05-28,18:55:04 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:55:04 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:55:04 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:55:04 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:55:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:55:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:55:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:04 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:55:04 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:04 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:55:04 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:55:04 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 19.18ms
2020-05-28,18:55:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:55:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:55:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:55:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:55:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:55:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 22.13ms
2020-05-28,18:55:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:55:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:55:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:55:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'url': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'61b92254-a955-4ec5-9c70-461ebb662d5c\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport requests\nimport pandas as pd\nimport json\nimport datetime\n\nkeys_csv = \'\'\nfirst_row_json = \'\'\n\ndef set_first_row(input):\n    global first_row_json # Needed to modify global copy of globvar\n    first_row_json = input\n\ndef get_first_row():\n    global first_row_json\n    return first_row_json\n\ndef set_globvar(input):\n    global keys_json  # Needed to modify global copy of globvar\n    global first_row_json\n    print(input)\n    if input == "Init":\n        keys_json = input\n    else:\n        keys_json = input.keys()\n    first_row_json = input\n\n\ndef get_globvar():\n    global keys_json\n    return keys_json\n\ndef get_query_json(url):\n    url = f\'{url.iloc[0]["url"]}\'\n    response = requests.get(url)\n    response = json.loads(response.text)\n    set_globvar(response[0])\n    #set_first_row(response["referrals"][0])\n    data = list()\n    for item in response:\n        data.append(item)\n    # set_globvar(next(iter).decode(\'utf-8\').split(\';\'))\n    # print(pd.DataFrame(data, columns=get_globvar()))\n    #print(pd.DataFrame(data, columns=get_globvar()))\n    return pd.DataFrame(data, columns=get_globvar())\n\ndef get_output_schema():\n    print("INIT")\n    if not "keys_json" in globals():\n        set_globvar("Init")\n\n    keys_json = get_globvar()\n    #keys = [\'INGR_CHANNELS.ATTR_NAME\', \'CALC_DPS.UNIT_RTG\', \'CALC_DPS.UNIT_RTGPCT\', \'CALC_DPS.UNIT_SHR\']\n    first_row_json = get_first_row()\n    dict = {}\n\n    if keys_json == \'Init\':\n        for i in keys_json:\n            dict[i] = prep_string()\n    else:\n        for i in keys_json:\n            print(first_row_json[i])\n            print(type(first_row_json[i]))\n\n            if i == "from":\n                dict[i] = prep_datetime()\n            elif i == "to":\n                dict[i] = prep_datetime()\n            elif i == "published":\n                dict[i] = prep_datetime()\n\n            elif isinstance(first_row_json[i], int):\n                dict[i] = prep_int()\n            elif isinstance(first_row_json[i], float):\n                dict[i] = prep_decimal()\n            else:\n                dict[i] = prep_string()\n\n    return pd.DataFrame(dict)\ndef get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2020-05-28,18:55:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '61b92254-a955-4ec5-9c70-461ebb662d5c'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import requests
 import pandas as pd
 import json
 import datetime
 
 keys_csv = ''
 first_row_json = ''
 
 def set_first_row(input):
     global first_row_json # Needed to modify global copy of globvar
     first_row_json = input
 
 def get_first_row():
     global first_row_json
     return first_row_json
 
 def set_globvar(input):
     global keys_json  # Needed to modify global copy of globvar
     global first_row_json
     print(input)
     if input == "Init":
         keys_json = input
     else:
         keys_json = input.keys()
     first_row_json = input
 
 
 def get_globvar():
     global keys_json
     return keys_json
 
 def get_query_json(url):
     url = f'{url.iloc[0]["url"]}'
     response = requests.get(url)
     response = json.loads(response.text)
     set_globvar(response[0])
     #set_first_row(response["referrals"][0])
     data = list()
     for item in response:
         data.append(item)
     # set_globvar(next(iter).decode('utf-8').split(';'))
     # print(pd.DataFrame(data, columns=get_globvar()))
     #print(pd.DataFrame(data, columns=get_globvar()))
     return pd.DataFrame(data, columns=get_globvar())
 
 def get_output_schema():
     print("INIT")
     if not "keys_json" in globals():
         set_globvar("Init")
 
     keys_json = get_globvar()
     #keys = ['INGR_CHANNELS.ATTR_NAME', 'CALC_DPS.UNIT_RTG', 'CALC_DPS.UNIT_RTGPCT', 'CALC_DPS.UNIT_SHR']
     first_row_json = get_first_row()
     dict = {}
 
     if keys_json == 'Init':
         for i in keys_json:
             dict[i] = prep_string()
     else:
         for i in keys_json:
             print(first_row_json[i])
             print(type(first_row_json[i]))
 
             if i == "from":
                 dict[i] = prep_datetime()
             elif i == "to":
                 dict[i] = prep_datetime()
             elif i == "published":
                 dict[i] = prep_datetime()
 
             elif isinstance(first_row_json[i], int):
                 dict[i] = prep_int()
             elif isinstance(first_row_json[i], float):
                 dict[i] = prep_decimal()
             else:
                 dict[i] = prep_string()
 
     return pd.DataFrame(dict)
 def get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_969ea95e26c44ec782bbe4e9fc44bb89(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-05-28,18:55:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 15.31ms
2020-05-28,18:55:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-05-28,18:55:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-05-28,18:55:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-05-28,18:55:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
2020-05-28,18:55:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-05-28,18:55:11 [DEBUG] (state.py:state:616): Returning value ''
